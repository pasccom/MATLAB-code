classdef TestSelect < matlab.unittest.TestCase
    properties(TestParameter)
        dataNoDimNumeric = struct(                                                                             ...
            'empty',            struct('in',                          {[]}, 'out',                      {[]}), ...
            'empty0x4',         struct('in',                 {zeros(0, 4)}, 'out',                      {[]}), ...
            'empty4x0',         struct('in',                 {zeros(4, 0)}, 'out',                      {[]}), ...
            'empty0x0x4',       struct('in',              {zeros(0, 0, 4)}, 'out',          {zeros(0, 0, 0)}), ...
            'someMatches1x4',   struct('in',                {[1, 2, 3, 4]}, 'out',                  {[2, 4]}), ...
            'allMatches1x4',    struct('in',                {[2, 4, 6, 8]}, 'out',            {[2, 4, 6, 8]}), ...
            'noMatches1x4',     struct('in',                {[1, 3, 5, 7]}, 'out',             {zeros(1, 0)}), ...
            'someMatches4x1',   struct('in',                {[1; 2; 3; 4]}, 'out',                  {[2; 4]}), ...
            'allMatches4x1',    struct('in',                {[2; 4; 6; 8]}, 'out',            {[2; 4; 6; 8]}), ...
            'noMatches4x1',     struct('in',                {[1; 3; 5; 7]}, 'out',             {zeros(0, 1)}), ...
            'someMatches1x1x4', struct('in',       {cumsum(ones(1, 1, 4))}, 'out', {2*cumsum(ones(1, 1, 2))}), ...
            'allMatches1x1x4',  struct('in',     {2*cumsum(ones(1, 1, 4))}, 'out', {2*cumsum(ones(1, 1, 4))}), ...
            'noMatches1x1x4',   struct('in', {1 + 2*cumsum(ones(1, 1, 4))}, 'out',          {zeros(1, 1, 0)})  ...
        );
        dataDimNumeric = struct(                                                                                                                                ...
            'emptyDim1',        struct('fun', @(X)      mod(X, 2) == 0, 'dim', 1, 'in',                             {[]}, 'out',                         {[]}), ...
            'emptyDim2',        struct('fun', @(X)      mod(X, 2) == 0, 'dim', 2, 'in',                             {[]}, 'out',                         {[]}), ...
            'empty0x4Dim1',     struct('fun', @(X)      mod(X, 2) == 0, 'dim', 1, 'in',                    {zeros(0, 4)}, 'out',                {zeros(0, 4)}), ...
            'empty0x4Dim2',     struct('fun', @(X)      mod(X, 2) == 0, 'dim', 2, 'in',                    {zeros(0, 4)}, 'out',                         {[]}), ...
            'empty4x0Dim1',     struct('fun', @(X)      mod(X, 2) == 0, 'dim', 1, 'in',                    {zeros(4, 0)}, 'out',                         {[]}), ...
            'empty4x0Dim2',     struct('fun', @(X)      mod(X, 2) == 0, 'dim', 2, 'in',                    {zeros(4, 0)}, 'out',                {zeros(4, 0)}), ...
            'empty0x0x4Dim1',   struct('fun', @(X)      mod(X, 2) == 0, 'dim', 1, 'in',                 {zeros(0, 0, 4)}, 'out',             {zeros(0, 0, 4)}), ...
            'empty0x0x4Dim2',   struct('fun', @(X)      mod(X, 2) == 0, 'dim', 2, 'in',                 {zeros(0, 0, 4)}, 'out',             {zeros(0, 0, 4)}), ...
            'empty0x0x4Dim3',   struct('fun', @(X)      mod(X, 2) == 0, 'dim', 3, 'in',                 {zeros(0, 0, 4)}, 'out',             {zeros(0, 0, 0)}), ...
            'someMatches1x4',   struct('fun', @(X) all(mod(X, 2) == 0), 'dim', 2, 'in',                   {[1, 2, 3, 4]}, 'out',                     {[2, 4]}), ...
            'allMatches1x4',    struct('fun', @(X) all(mod(X, 2) == 0), 'dim', 2, 'in',                   {[2, 4, 6, 8]}, 'out',               {[2, 4, 6, 8]}), ...
            'noMatches1x4',     struct('fun', @(X) all(mod(X, 2) == 0), 'dim', 2, 'in',                   {[1, 3, 5, 7]}, 'out',                {zeros(1, 0)}), ...
            'someMatches4x1',   struct('fun', @(X) all(mod(X, 2) == 0), 'dim', 1, 'in',                   {[1; 2; 3; 4]}, 'out',                     {[2; 4]}), ...
            'allMatches4x1',    struct('fun', @(X) all(mod(X, 2) == 0), 'dim', 1, 'in',                   {[2; 4; 6; 8]}, 'out',               {[2; 4; 6; 8]}), ...
            'noMatches4x1',     struct('fun', @(X) all(mod(X, 2) == 0), 'dim', 1, 'in',                   {[1; 3; 5; 7]}, 'out',                {zeros(0, 1)}), ...
            'someMatches1x1x4', struct('fun', @(X) all(mod(X, 2) == 0), 'dim', 3, 'in',          {cumsum(ones(1, 1, 4))}, 'out',    {2*cumsum(ones(1, 1, 2))}), ...
            'allMatches1x1x4',  struct('fun', @(X) all(mod(X, 2) == 0), 'dim', 3, 'in',        {2*cumsum(ones(1, 1, 4))}, 'out',    {2*cumsum(ones(1, 1, 4))}), ...
            'noMatches1x1x4',   struct('fun', @(X) all(mod(X, 2) == 0), 'dim', 3, 'in',    {1 + 2*cumsum(ones(1, 1, 4))}, 'out',             {zeros(1, 1, 0)}), ...
            'someMatchesAll2x4',struct('fun', @(X) all(mod(X, 2) == 0), 'dim', 2, 'in',       {[1, 2, 3, 4; 5, 6, 7, 8]}, 'out',               {[2, 4; 6, 8]}), ...
            'allMatchesAll2x4', struct('fun', @(X) all(mod(X, 2) == 0), 'dim', 2, 'in',       {[2, 4, 6, 8; 8, 6, 4, 2]}, 'out',   {[2, 4, 6, 8; 8, 6, 4, 2]}), ...
            'noMatchesAll2x4',  struct('fun', @(X) all(mod(X, 2) == 0), 'dim', 2, 'in',       {[1, 3, 5, 7; 2, 4, 6, 8]}, 'out',                {zeros(2, 0)}), ...
            'someMatchesAny2x4',struct('fun', @(X) any(mod(X, 2) == 0), 'dim', 2, 'in',       {[1, 2, 3, 4; 5, 6, 7, 8]}, 'out',               {[2, 4; 6, 8]}), ...
            'allMatchesAny2x4', struct('fun', @(X) any(mod(X, 2) == 0), 'dim', 2, 'in',       {[2, 4, 6, 8; 1, 3, 5, 7]}, 'out',   {[2, 4, 6, 8; 1, 3, 5, 7]}), ...
            'noMatchesAny2x4',  struct('fun', @(X) any(mod(X, 2) == 0), 'dim', 2, 'in',       {[1, 3, 5, 7; 7, 5, 3, 1]}, 'out',                {zeros(2, 0)}), ...
            'someMatchesAll4x2',struct('fun', @(X) all(mod(X, 2) == 0), 'dim', 1, 'in',       {[1, 5; 2, 6; 3, 7; 4, 8]}, 'out',               {[2, 6; 4, 8]}), ...
            'allMatchesAll4x2', struct('fun', @(X) all(mod(X, 2) == 0), 'dim', 1, 'in',       {[2, 8; 4, 6; 6, 4; 8, 2]}, 'out',   {[2, 8; 4, 6; 6, 4; 8, 2]}), ...
            'noMatchesAll4x2',  struct('fun', @(X) all(mod(X, 2) == 0), 'dim', 1, 'in',       {[1, 2; 3, 4; 5, 6; 7, 8]}, 'out',                {zeros(0, 2)}), ...
            'someMatchesAny4x2',struct('fun', @(X) any(mod(X, 2) == 0), 'dim', 1, 'in',       {[1, 5; 2, 6; 3, 7; 4, 8]}, 'out',               {[2, 6; 4, 8]}), ...
            'allMatchesAny4x2', struct('fun', @(X) any(mod(X, 2) == 0), 'dim', 1, 'in',       {[1, 2; 3, 4; 5, 6; 7, 8]}, 'out',   {[1, 2; 3, 4; 5, 6; 7, 8]}), ...
            'noMatchesAny4x2',  struct('fun', @(X) any(mod(X, 2) == 0), 'dim', 1, 'in',       {[1, 7; 3, 5; 5, 3; 7, 1]}, 'out',                {zeros(0, 2)}), ...
            'someMatches1x2x4', struct('fun', @(X) all(mod(X, 2) == 0), 'dim', 3, 'in',       {cumsum(ones(1, 2, 4), 3)}, 'out', {2*cumsum(ones(1, 2, 2), 3)}), ...
            'allMatches1x2x4',  struct('fun', @(X) all(mod(X, 2) == 0), 'dim', 3, 'in',     {2*cumsum(ones(1, 2, 4), 3)}, 'out', {2*cumsum(ones(1, 2, 4), 3)}), ...
            'noMatches1x2x4',   struct('fun', @(X) all(mod(X, 2) == 0), 'dim', 3, 'in', {1 + 2*cumsum(ones(1, 2, 4), 3)}, 'out',             {zeros(1, 2, 0)}), ...
            'someMatches2x1x4', struct('fun', @(X) all(mod(X, 2) == 0), 'dim', 3, 'in',       {cumsum(ones(2, 1, 4), 3)}, 'out', {2*cumsum(ones(2, 1, 2), 3)}), ...
            'allMatches2x1x4',  struct('fun', @(X) all(mod(X, 2) == 0), 'dim', 3, 'in',     {2*cumsum(ones(2, 1, 4), 3)}, 'out', {2*cumsum(ones(2, 1, 4), 3)}), ...
            'noMatches2x1x4',   struct('fun', @(X) all(mod(X, 2) == 0), 'dim', 3, 'in', {1 + 2*cumsum(ones(2, 1, 4), 3)}, 'out',             {zeros(2, 1, 0)})  ...
        );
        dataChar = struct(                                                        ...
            'empty',          struct('in',     {''}, 'out',                {''}), ...
            'someMatches1x4', struct('in', {'aBcD'}, 'out',              {'BD'}), ...
            'allMatches1x4',  struct('in', {'ABCD'}, 'out',            {'ABCD'}), ...
            'noMatches1x4',   struct('in', {'abcd'}, 'out', {char(zeros(1, 0))})  ...
        );
        dataNoDimCell = struct(                                                                                                                                                         ...
            'empty',            struct('fun', @(X)      ischar(X{:}), 'in',                                       {cell(0, 0)}, 'out',                                   {cell(0, 0)}), ...
            'empty0x4',         struct('fun', @(X)      ischar(X{:}), 'in',                                       {cell(0, 4)}, 'out',                                   {cell(0, 0)}), ...
            'empty4x0',         struct('fun', @(X)      ischar(X{:}), 'in',                                       {cell(4, 0)}, 'out',                                   {cell(0, 0)}), ...
            'empty0x0x4',       struct('fun', @(X)      ischar(X{:}), 'in',                                    {cell(0, 0, 4)}, 'out',                                {cell(0, 0, 0)}), ...
            'someMatches1x4',   struct('fun', @(X)      ischar(X{:}), 'in',                                 {{1, '2', 3, '4'}}, 'out',                                   {{'2', '4'}}), ...
            'allMatches1x4',    struct('fun', @(X)      ischar(X{:}), 'in',                             {{'2', '4', '6', '8'}}, 'out',                         {{'2', '4', '6', '8'}}), ...
            'noMatches1x4',     struct('fun', @(X)      ischar(X{:}), 'in',                                     {{1, 3, 5, 7}}, 'out',                                   {cell(1, 0)}), ...
            'someMatches4x1',   struct('fun', @(X)      ischar(X{:}), 'in',                                 {{1; '2'; 3; '4'}}, 'out',                                   {{'2'; '4'}}), ...
            'allMatches4x1',    struct('fun', @(X)      ischar(X{:}), 'in',                             {{'2'; '4'; '6'; '8'}}, 'out',                         {{'2'; '4'; '6'; '8'}}), ...
            'noMatches4x1',     struct('fun', @(X)      ischar(X{:}), 'in',                                     {{1; 3; 5; 7}}, 'out',                                   {cell(0, 1)}), ...
            'someMatches1x1x4', struct('fun', @(X) mod(X{:}, 2) == 0, 'in',       {TestSelect.mat2cell(cumsum(ones(1, 1, 4)))}, 'out', {TestSelect.mat2cell(2*cumsum(ones(1, 1, 2)))}), ...
            'allMatches1x1x4',  struct('fun', @(X) mod(X{:}, 2) == 0, 'in',     {TestSelect.mat2cell(2*cumsum(ones(1, 1, 4)))}, 'out', {TestSelect.mat2cell(2*cumsum(ones(1, 1, 4)))}), ...
            'noMatches1x1x4',   struct('fun', @(X) mod(X{:}, 2) == 0, 'in', {TestSelect.mat2cell(1 + 2*cumsum(ones(1, 1, 4)))}, 'out',                                {cell(1, 1, 0)})  ...
        );
        dataDimCell = struct(                                                                                                                                                                                              ...
            'emptyDim1',        struct('fun', @(X)                         ischar(X{:}), 'dim', 1, 'in',                                          {cell(0, 0)}, 'out',                                      {cell(0, 0)}), ...
            'emptyDim2',        struct('fun', @(X)                         ischar(X{:}), 'dim', 2, 'in',                                          {cell(0, 0)}, 'out',                                      {cell(0, 0)}), ...
            'empty0x4Dim1',     struct('fun', @(X)                         ischar(X{:}), 'dim', 1, 'in',                                          {cell(0, 4)}, 'out',                                      {cell(0, 4)}), ...
            'empty0x4Dim2',     struct('fun', @(X)                         ischar(X{:}), 'dim', 2, 'in',                                          {cell(0, 4)}, 'out',                                      {cell(0, 0)}), ...
            'empty4x0Dim1',     struct('fun', @(X)                         ischar(X{:}), 'dim', 1, 'in',                                          {cell(4, 0)}, 'out',                                      {cell(0, 0)}), ...
            'empty4x0Dim2',     struct('fun', @(X)                         ischar(X{:}), 'dim', 2, 'in',                                          {cell(4, 0)}, 'out',                                      {cell(4, 0)}), ...
            'empty0x0x4Dim1',   struct('fun', @(X)                         ischar(X{:}), 'dim', 1, 'in',                                       {cell(0, 0, 4)}, 'out',                                   {cell(0, 0, 4)}), ...
            'empty0x0x4Dim2',   struct('fun', @(X)                         ischar(X{:}), 'dim', 2, 'in',                                       {cell(0, 0, 4)}, 'out',                                   {cell(0, 0, 4)}), ...
            'empty0x0x4Dim3',   struct('fun', @(X)                         ischar(X{:}), 'dim', 3, 'in',                                       {cell(0, 0, 4)}, 'out',                                   {cell(0, 0, 0)}), ...
            'someMatches1x4',   struct('fun', @(X)                         ischar(X{:}), 'dim', 2, 'in',                                    {{1, '2', 3, '4'}}, 'out',                                      {{'2', '4'}}), ...
            'allMatches1x4',    struct('fun', @(X)                         ischar(X{:}), 'dim', 2, 'in',                                {{'2', '4', '6', '8'}}, 'out',                            {{'2', '4', '6', '8'}}), ...
            'noMatches1x4',     struct('fun', @(X)                         ischar(X{:}), 'dim', 2, 'in',                                        {{1, 3, 5, 7}}, 'out',                                      {cell(1, 0)}), ...
            'someMatches4x1',   struct('fun', @(X)                         ischar(X{:}), 'dim', 1, 'in',                                    {{1; '2'; 3; '4'}}, 'out',                                      {{'2'; '4'}}), ...
            'allMatches4x1',    struct('fun', @(X)                         ischar(X{:}), 'dim', 1, 'in',                                {{'2'; '4'; '6'; '8'}}, 'out',                            {{'2'; '4'; '6'; '8'}}), ...
            'noMatches4x1',     struct('fun', @(X)                         ischar(X{:}), 'dim', 1, 'in',                                        {{1; 3; 5; 7}}, 'out',                                      {cell(0, 1)}), ...
            'someMatches1x1x4', struct('fun', @(X)                    mod(X{:}, 2) == 0, 'dim', 3, 'in',          {TestSelect.mat2cell(cumsum(ones(1, 1, 4)))}, 'out',    {TestSelect.mat2cell(2*cumsum(ones(1, 1, 2)))}), ...
            'allMatches1x1x4',  struct('fun', @(X)                    mod(X{:}, 2) == 0, 'dim', 3, 'in',        {TestSelect.mat2cell(2*cumsum(ones(1, 1, 4)))}, 'out',    {TestSelect.mat2cell(2*cumsum(ones(1, 1, 4)))}), ...
            'noMatches1x1x4',   struct('fun', @(X)                    mod(X{:}, 2) == 0, 'dim', 3, 'in',    {TestSelect.mat2cell(1 + 2*cumsum(ones(1, 1, 4)))}, 'out',                                   {cell(1, 1, 0)}), ...
            'someMatchesAll2x4',struct('fun', @(X)             all(cellfun(@ischar, X)), 'dim', 2, 'in',                    {{1, '2', 3, '4'; 5, '6', 7, '8'}}, 'out',                            {{'2', '4'; '6', '8'}}), ...
            'allMatchesAll2x4', struct('fun', @(X)             all(cellfun(@ischar, X)), 'dim', 2, 'in',            {{'2', '4', '6', '8'; '8', '6', '4', '2'}}, 'out',        {{'2', '4', '6', '8'; '8', '6', '4', '2'}}), ...
            'noMatchesAll2x4',  struct('fun', @(X)             all(cellfun(@ischar, X)), 'dim', 2, 'in',                    {{1, 3, 5, 7; '2', '4', '6', '8'}}, 'out',                                      {cell(2, 0)}), ...
            'someMatchesAny2x4',struct('fun', @(X)             any(cellfun(@ischar, X)), 'dim', 2, 'in',                    {{1, '2', 3, '4'; 5, '6', 7, '8'}}, 'out',                            {{'2', '4'; '6', '8'}}), ...
            'allMatchesAny2x4', struct('fun', @(X)             any(cellfun(@ischar, X)), 'dim', 2, 'in',                    {{'2', '4', '6', '8'; 1, 3, 5, 7}}, 'out',                {{'2', '4', '6', '8'; 1, 3, 5, 7}}), ...
            'noMatchesAny2x4',  struct('fun', @(X)             any(cellfun(@ischar, X)), 'dim', 2, 'in',                            {{1, 3, 5, 7; 7, 5, 3, 1}}, 'out',                                      {cell(2, 0)}), ...
            'someMatchesAll4x2',struct('fun', @(X)             all(cellfun(@ischar, X)), 'dim', 1, 'in',                    {{1, 5; '2', '6'; 3, 7; '4', '8'}}, 'out',                            {{'2', '6'; '4', '8'}}), ...
            'allMatchesAll4x2', struct('fun', @(X)             all(cellfun(@ischar, X)), 'dim', 1, 'in',            {{'2', '8'; '4', '6'; '6', '4'; '8', '2'}}, 'out',        {{'2', '8'; '4', '6'; '6', '4'; '8', '2'}}), ...
            'noMatchesAll4x2',  struct('fun', @(X)             all(cellfun(@ischar, X)), 'dim', 1, 'in',                    {{1, '2'; 3, '4'; 5, '6'; 7, '8'}}, 'out',                                      {cell(0, 2)}), ...
            'someMatchesAny4x2',struct('fun', @(X)             any(cellfun(@ischar, X)), 'dim', 1, 'in',                    {{1, 5; '2', '6'; 3, 7; '4', '8'}}, 'out',                            {{'2', '6'; '4', '8'}}), ...
            'allMatchesAny4x2', struct('fun', @(X)             any(cellfun(@ischar, X)), 'dim', 1, 'in',                    {{1, '2'; 3, '4'; 5, '6'; 7, '8'}}, 'out',                {{1, '2'; 3, '4'; 5, '6'; 7, '8'}}), ...
            'noMatchesAny4x2',  struct('fun', @(X)             any(cellfun(@ischar, X)), 'dim', 1, 'in',                            {{1, 7; 3, 5; 5, 3; 7, 1}}, 'out',                                      {cell(0, 2)}), ...
            'someMatches1x2x4', struct('fun', @(X) all(cellfun(@(x) mod(x, 2) == 0, X)), 'dim', 3, 'in',       {TestSelect.mat2cell(cumsum(ones(1, 2, 4), 3))}, 'out', {TestSelect.mat2cell(2*cumsum(ones(1, 2, 2), 3))}), ...
            'allMatches1x2x4',  struct('fun', @(X) all(cellfun(@(x) mod(x, 2) == 0, X)), 'dim', 3, 'in',     {TestSelect.mat2cell(2*cumsum(ones(1, 2, 4), 3))}, 'out', {TestSelect.mat2cell(2*cumsum(ones(1, 2, 4), 3))}), ...
            'noMatches1x2x4',   struct('fun', @(X) all(cellfun(@(x) mod(x, 2) == 0, X)), 'dim', 3, 'in', {TestSelect.mat2cell(1 + 2*cumsum(ones(1, 2, 4), 3))}, 'out',                                   {cell(1, 2, 0)}), ...
            'someMatches2x1x4', struct('fun', @(X) all(cellfun(@(x) mod(x, 2) == 0, X)), 'dim', 3, 'in',       {TestSelect.mat2cell(cumsum(ones(2, 1, 4), 3))}, 'out', {TestSelect.mat2cell(2*cumsum(ones(2, 1, 2), 3))}), ...
            'allMatches2x1x4',  struct('fun', @(X) all(cellfun(@(x) mod(x, 2) == 0, X)), 'dim', 3, 'in',     {TestSelect.mat2cell(2*cumsum(ones(2, 1, 4), 3))}, 'out', {TestSelect.mat2cell(2*cumsum(ones(2, 1, 4), 3))}), ...
            'noMatches2x1x4',   struct('fun', @(X) all(cellfun(@(x) mod(x, 2) == 0, X)), 'dim', 3, 'in', {TestSelect.mat2cell(1 + 2*cumsum(ones(2, 1, 4), 3))}, 'out',                                   {cell(2, 1, 0)})  ...
        );
        dataNoDimStruct = struct(                                                                                                                                                                                                                                                                ...
            'empty',            struct('in', struct('f1',                                               {}, 'f2',                                               {}), 'out', struct('f1',                                           {}, 'f2',                                               {})), ...
            'empty0x4',         struct('in', struct('f1',                                       cell(0, 4), 'f2',                                       cell(0, 4)), 'out', struct('f1',                                           {}, 'f2',                                               {})), ...
            'empty4x0',         struct('in', struct('f1',                                       cell(4, 0), 'f2',                                       cell(4, 0)), 'out', struct('f1',                                           {}, 'f2',                                               {})), ...
            'empty0x0x4',       struct('in', struct('f1',                                    cell(0, 0, 4), 'f2',                                    cell(0, 0, 4)), 'out', struct('f1',                                cell(0, 0, 0), 'f2',                                    cell(0, 0, 0))), ...
            'someMatches1x4',   struct('in', struct('f1',                                     {1, 2, 3, 4}, 'f2',                                     {5, 6, 7, 8}), 'out', struct('f1',                                       {2, 4}, 'f2',                                           {6, 8})), ...
            'allMatches1x4',    struct('in', struct('f1',                                     {2, 4, 6, 8}, 'f2',                                     {1, 3, 5, 7}), 'out', struct('f1',                                 {2, 4, 6, 8}, 'f2',                                     {1, 3, 5, 7})), ...
            'noMatches1x4',     struct('in', struct('f1',                                     {1, 3, 5, 7}, 'f2',                                     {2, 4, 6, 8}), 'out', struct('f1',                                   cell(1, 0), 'f2',                                       cell(1, 0))), ...
            'someMatches4x1',   struct('in', struct('f1',                                     {1; 2; 3; 4}, 'f2',                                     {5; 6; 7; 8}), 'out', struct('f1',                                       {2; 4}, 'f2',                                           {6; 8})), ...
            'allMatches4x1',    struct('in', struct('f1',                                     {2; 4; 6; 8}, 'f2',                                     {1; 3; 5; 7}), 'out', struct('f1',                                 {2; 4; 6; 8}, 'f2',                                     {1; 3; 5; 7})), ...
            'noMatches4x1',     struct('in', struct('f1',                                     {1; 3; 5; 7}, 'f2',                                     {2; 4; 6; 8}), 'out', struct('f1',                                   cell(0, 1), 'f2',                                       cell(0, 1))), ...
            'someMatches1x1x4', struct('in', struct('f1',       TestSelect.mat2cell(cumsum(ones(1, 1, 4))), 'f2',   TestSelect.mat2cell(4 + cumsum(ones(1, 1, 4)))), 'out', struct('f1', TestSelect.mat2cell(2*cumsum(ones(1, 1, 2))), 'f2', TestSelect.mat2cell(4 + 2*cumsum(ones(1, 1, 2))))), ...
            'allMatches1x1x4',  struct('in', struct('f1',     TestSelect.mat2cell(2*cumsum(ones(1, 1, 4))), 'f2', TestSelect.mat2cell(1 + 2*cumsum(ones(1, 1, 4)))), 'out', struct('f1', TestSelect.mat2cell(2*cumsum(ones(1, 1, 4))), 'f2', TestSelect.mat2cell(1 + 2*cumsum(ones(1, 1, 4))))), ...
            'noMatches1x1x4',   struct('in', struct('f1', TestSelect.mat2cell(1 + 2*cumsum(ones(1, 1, 4))), 'f2',     TestSelect.mat2cell(2*cumsum(ones(1, 1, 4)))), 'out', struct('f1',                                cell(1, 1, 0), 'f2',                                    cell(1, 1, 0)))  ...
        );
        dataDimStruct = struct(                                                                                                                                                                                                                                                                                                                                           ...
            'emptyDim1',        struct('fun', @(X)                        mod(X.f1, 2) == 0, 'dim', 1, 'in', struct('f1',                                                  {}, 'f2',                                                  {}), 'out', struct('f1',                                              {}, 'f2',                                               {})), ...
            'emptyDim2',        struct('fun', @(X)                        mod(X.f1, 2) == 0, 'dim', 2, 'in', struct('f1',                                                  {}, 'f2',                                                  {}), 'out', struct('f1',                                              {}, 'f2',                                               {})), ...
            'empty0x4Dim1',     struct('fun', @(X)                        mod(X.f1, 2) == 0, 'dim', 1, 'in', struct('f1',                                          cell(0, 4), 'f2',                                          cell(0, 4)), 'out', struct('f1',                                      cell(0, 4), 'f2',                                       cell(0, 4))), ...
            'empty0x4Dim2',     struct('fun', @(X)                        mod(X.f1, 2) == 0, 'dim', 2, 'in', struct('f1',                                          cell(0, 4), 'f2',                                          cell(0, 4)), 'out', struct('f1',                                              {}, 'f2',                                               {})), ...
            'empty4x0Dim1',     struct('fun', @(X)                        mod(X.f1, 2) == 0, 'dim', 1, 'in', struct('f1',                                          cell(4, 0), 'f2',                                          cell(4, 0)), 'out', struct('f1',                                              {}, 'f2',                                               {})), ...
            'empty4x0Dim2',     struct('fun', @(X)                        mod(X.f1, 2) == 0, 'dim', 2, 'in', struct('f1',                                          cell(4, 0), 'f2',                                          cell(4, 0)), 'out', struct('f1',                                      cell(4, 0), 'f2',                                       cell(4, 0))), ...
            'empty0x0x4Dim1',   struct('fun', @(X)                        mod(X.f1, 2) == 0, 'dim', 1, 'in', struct('f1',                                       cell(0, 0, 4), 'f2',                                       cell(0, 0, 4)), 'out', struct('f1',                                   cell(0, 0, 4), 'f2',                                    cell(0, 0, 4))), ...
            'empty0x0x4Dim2',   struct('fun', @(X)                        mod(X.f1, 2) == 0, 'dim', 2, 'in', struct('f1',                                       cell(0, 0, 4), 'f2',                                       cell(0, 0, 4)), 'out', struct('f1',                                   cell(0, 0, 4), 'f2',                                    cell(0, 0, 4))), ...
            'empty0x0x4Dim3',   struct('fun', @(X)                        mod(X.f1, 2) == 0, 'dim', 3, 'in', struct('f1',                                       cell(0, 0, 4), 'f2',                                       cell(0, 0, 4)), 'out', struct('f1',                                   cell(0, 0, 0), 'f2',                                    cell(0, 0, 0))), ...
            'someMatches1x4',   struct('fun', @(X)                   all(mod(X.f1, 2) == 0), 'dim', 2, 'in', struct('f1',                                        {1, 2, 3, 4}, 'f2',                                        {5, 6, 7, 8}), 'out', struct('f1',                                          {2, 4}, 'f2',                                           {6, 8})), ...
            'allMatches1x4',    struct('fun', @(X)                   all(mod(X.f1, 2) == 0), 'dim', 2, 'in', struct('f1',                                        {2, 4, 6, 8}, 'f2',                                        {1, 3, 5, 7}), 'out', struct('f1',                                    {2, 4, 6, 8}, 'f2',                                     {1, 3, 5, 7})), ...
            'noMatches1x4',     struct('fun', @(X)                   all(mod(X.f1, 2) == 0), 'dim', 2, 'in', struct('f1',                                        {1, 3, 5, 7}, 'f2',                                        {2, 4, 6, 8}), 'out', struct('f1',                                      cell(1, 0), 'f2',                                       cell(1, 0))), ...
            'someMatches4x1',   struct('fun', @(X)                   all(mod(X.f1, 2) == 0), 'dim', 1, 'in', struct('f1',                                        {1; 2; 3; 4}, 'f2',                                        {5; 6; 7; 8}), 'out', struct('f1',                                          {2; 4}, 'f2',                                           {6; 8})), ...
            'allMatches4x1',    struct('fun', @(X)                   all(mod(X.f1, 2) == 0), 'dim', 1, 'in', struct('f1',                                        {2; 4; 6; 8}, 'f2',                                        {1; 3; 5; 7}), 'out', struct('f1',                                    {2; 4; 6; 8}, 'f2',                                     {1; 3; 5; 7})), ...
            'noMatches4x1',     struct('fun', @(X)                   all(mod(X.f1, 2) == 0), 'dim', 1, 'in', struct('f1',                                        {1; 3; 5; 7}, 'f2',                                        {2; 4; 6; 8}), 'out', struct('f1',                                      cell(0, 1), 'f2',                                       cell(0, 1))), ...
            'someMatches1x1x4', struct('fun', @(X)                   all(mod(X.f1, 2) == 0), 'dim', 3, 'in', struct('f1',          TestSelect.mat2cell(cumsum(ones(1, 1, 4))), 'f2',      TestSelect.mat2cell(4 + cumsum(ones(1, 1, 4)))), 'out', struct('f1',    TestSelect.mat2cell(2*cumsum(ones(1, 1, 2))), 'f2', TestSelect.mat2cell(4 + 2*cumsum(ones(1, 1, 2))))), ...
            'allMatches1x1x4',  struct('fun', @(X)                   all(mod(X.f1, 2) == 0), 'dim', 3, 'in', struct('f1',        TestSelect.mat2cell(2*cumsum(ones(1, 1, 4))), 'f2',    TestSelect.mat2cell(1 + 2*cumsum(ones(1, 1, 4)))), 'out', struct('f1',    TestSelect.mat2cell(2*cumsum(ones(1, 1, 4))), 'f2', TestSelect.mat2cell(1 + 2*cumsum(ones(1, 1, 4))))), ...
            'noMatches1x1x4',   struct('fun', @(X)                   all(mod(X.f1, 2) == 0), 'dim', 3, 'in', struct('f1',    TestSelect.mat2cell(1 + 2*cumsum(ones(1, 1, 4))), 'f2',        TestSelect.mat2cell(2*cumsum(ones(1, 1, 4)))), 'out', struct('f1',                                   cell(1, 1, 0), 'f2',                                    cell(1, 1, 0))), ...
            'someMatchesAll2x4',struct('fun', @(X) all(arrayfun(@(x) mod(x.f1, 2) == 0, X)), 'dim', 2, 'in', struct('f1',                            {1, 2, 3, 4; 5, 6, 7, 8}, 'f2',                            {1, 2, 3, 4; 5, 6, 7, 8}), 'out', struct('f1',                                    {2, 4; 6, 8}, 'f2',                                     {2, 4; 6, 8})), ...
            'allMatchesAll2x4', struct('fun', @(X) all(arrayfun(@(x) mod(x.f1, 2) == 0, X)), 'dim', 2, 'in', struct('f1',                            {2, 4, 6, 8; 8, 6, 4, 2}, 'f2',                            {2, 4, 6, 8; 8, 6, 4, 2}), 'out', struct('f1',                        {2, 4, 6, 8; 8, 6, 4, 2}, 'f2',                         {2, 4, 6, 8; 8, 6, 4, 2})), ...
            'noMatchesAll2x4',  struct('fun', @(X) all(arrayfun(@(x) mod(x.f1, 2) == 0, X)), 'dim', 2, 'in', struct('f1',                            {1, 3, 5, 7; 2, 4, 6, 8}, 'f2',                            {1, 3, 5, 7; 2, 4, 6, 8}), 'out', struct('f1',                                      cell(2, 0), 'f2',                                       cell(2, 0))), ...
            'someMatchesAny2x4',struct('fun', @(X) any(arrayfun(@(x) mod(x.f1, 2) == 0, X)), 'dim', 2, 'in', struct('f1',                            {1, 2, 3, 4; 5, 6, 7, 8}, 'f2',                            {1, 2, 3, 4; 5, 6, 7, 8}), 'out', struct('f1',                                    {2, 4; 6, 8}, 'f2',                                     {2, 4; 6, 8})), ...
            'allMatchesAny2x4', struct('fun', @(X) any(arrayfun(@(x) mod(x.f1, 2) == 0, X)), 'dim', 2, 'in', struct('f1',                            {2, 4, 6, 8; 1, 3, 5, 7}, 'f2',                            {2, 4, 6, 8; 1, 3, 5, 7}), 'out', struct('f1',                        {2, 4, 6, 8; 1, 3, 5, 7}, 'f2',                         {2, 4, 6, 8; 1, 3, 5, 7})), ...
            'noMatchesAny2x4',  struct('fun', @(X) any(arrayfun(@(x) mod(x.f1, 2) == 0, X)), 'dim', 2, 'in', struct('f1',                            {1, 3, 5, 7; 7, 5, 3, 1}, 'f2',                            {1, 3, 5, 7; 7, 5, 3, 1}), 'out', struct('f1',                                      cell(2, 0), 'f2',                                       cell(2, 0))), ...
            'someMatchesAll4x2',struct('fun', @(X) all(arrayfun(@(x) mod(x.f1, 2) == 0, X)), 'dim', 1, 'in', struct('f1',                            {1, 5; 2, 6; 3, 7; 4, 8}, 'f2',                            {1, 5; 2, 6; 3, 7; 4, 8}), 'out', struct('f1',                                    {2, 6; 4, 8}, 'f2',                                     {2, 6; 4, 8})), ...
            'allMatchesAll4x2', struct('fun', @(X) all(arrayfun(@(x) mod(x.f1, 2) == 0, X)), 'dim', 1, 'in', struct('f1',                            {2, 8; 4, 6; 6, 4; 8, 2}, 'f2',                            {2, 8; 4, 6; 6, 4; 8, 2}), 'out', struct('f1',                        {2, 8; 4, 6; 6, 4; 8, 2}, 'f2',                         {2, 8; 4, 6; 6, 4; 8, 2})), ...
            'noMatchesAll4x2',  struct('fun', @(X) all(arrayfun(@(x) mod(x.f1, 2) == 0, X)), 'dim', 1, 'in', struct('f1',                            {1, 2; 3, 4; 5, 6; 7, 8}, 'f2',                            {1, 2; 3, 4; 5, 6; 7, 8}), 'out', struct('f1',                                      cell(0, 2), 'f2',                                       cell(0, 2))), ...
            'someMatchesAny4x2',struct('fun', @(X) any(arrayfun(@(x) mod(x.f1, 2) == 0, X)), 'dim', 1, 'in', struct('f1',                            {1, 5; 2, 6; 3, 7; 4, 8}, 'f2',                            {1, 5; 2, 6; 3, 7; 4, 8}), 'out', struct('f1',                                    {2, 6; 4, 8}, 'f2',                                     {2, 6; 4, 8})), ...
            'allMatchesAny4x2', struct('fun', @(X) any(arrayfun(@(x) mod(x.f1, 2) == 0, X)), 'dim', 1, 'in', struct('f1',                            {1, 2; 3, 4; 5, 6; 7, 8}, 'f2',                            {1, 2; 3, 4; 5, 6; 7, 8}), 'out', struct('f1',                        {1, 2; 3, 4; 5, 6; 7, 8}, 'f2',                         {1, 2; 3, 4; 5, 6; 7, 8})), ...
            'noMatchesAny4x2',  struct('fun', @(X) any(arrayfun(@(x) mod(x.f1, 2) == 0, X)), 'dim', 1, 'in', struct('f1',                            {1, 7; 3, 5; 5, 3; 7, 1}, 'f2',                            {1, 7; 3, 5; 5, 3; 7, 1}), 'out', struct('f1',                                      cell(0, 2), 'f2',                                       cell(0, 2))), ...
            'someMatches1x2x4', struct('fun', @(X) all(arrayfun(@(x) mod(x.f1, 2) == 0, X)), 'dim', 3, 'in', struct('f1',       TestSelect.mat2cell(cumsum(ones(1, 2, 4), 3)), 'f2',       TestSelect.mat2cell(cumsum(ones(1, 2, 4), 3))), 'out', struct('f1', TestSelect.mat2cell(2*cumsum(ones(1, 2, 2), 3)), 'f2',  TestSelect.mat2cell(2*cumsum(ones(1, 2, 2), 3)))), ...
            'allMatches1x2x4',  struct('fun', @(X) all(arrayfun(@(x) mod(x.f1, 2) == 0, X)), 'dim', 3, 'in', struct('f1',     TestSelect.mat2cell(2*cumsum(ones(1, 2, 4), 3)), 'f2',     TestSelect.mat2cell(2*cumsum(ones(1, 2, 4), 3))), 'out', struct('f1', TestSelect.mat2cell(2*cumsum(ones(1, 2, 4), 3)), 'f2',  TestSelect.mat2cell(2*cumsum(ones(1, 2, 4), 3)))), ...
            'noMatches1x2x4',   struct('fun', @(X) all(arrayfun(@(x) mod(x.f1, 2) == 0, X)), 'dim', 3, 'in', struct('f1', TestSelect.mat2cell(1 + 2*cumsum(ones(1, 2, 4), 3)), 'f2', TestSelect.mat2cell(1 + 2*cumsum(ones(1, 2, 4), 3))), 'out', struct('f1',                                   cell(1, 2, 0), 'f2',                                    cell(1, 2, 0))), ...
            'someMatches2x1x4', struct('fun', @(X) all(arrayfun(@(x) mod(x.f1, 2) == 0, X)), 'dim', 3, 'in', struct('f1',       TestSelect.mat2cell(cumsum(ones(2, 1, 4), 3)), 'f2',       TestSelect.mat2cell(cumsum(ones(2, 1, 4), 3))), 'out', struct('f1', TestSelect.mat2cell(2*cumsum(ones(2, 1, 2), 3)), 'f2',  TestSelect.mat2cell(2*cumsum(ones(2, 1, 2), 3)))), ...
            'allMatches2x1x4',  struct('fun', @(X) all(arrayfun(@(x) mod(x.f1, 2) == 0, X)), 'dim', 3, 'in', struct('f1',     TestSelect.mat2cell(2*cumsum(ones(2, 1, 4), 3)), 'f2',     TestSelect.mat2cell(2*cumsum(ones(2, 1, 4), 3))), 'out', struct('f1', TestSelect.mat2cell(2*cumsum(ones(2, 1, 4), 3)), 'f2',  TestSelect.mat2cell(2*cumsum(ones(2, 1, 4), 3)))), ...
            'noMatches2x1x4',   struct('fun', @(X) all(arrayfun(@(x) mod(x.f1, 2) == 0, X)), 'dim', 3, 'in', struct('f1', TestSelect.mat2cell(1 + 2*cumsum(ones(2, 1, 4), 3)), 'f2', TestSelect.mat2cell(1 + 2*cumsum(ones(2, 1, 4), 3))), 'out', struct('f1',                                   cell(2, 1, 0), 'f2',                                    cell(2, 1, 0)))  ...
        );
        dataType = struct(                 ...
            'logical1x2', {[true, false]}, ...
            'logical2x1', {[true; false]}, ...
            'fun2x1',            {@(x) x}  ...
        );
        dataErrorNoDim = struct(                      ...
            'error2x4',   {[1, 2, 3, 4; 5, 6, 7, 8]}, ...
            'error4x2',   {[1, 2; 3, 4; 5, 6; 7, 8]}, ...
            'error2x1x4',            {ones(2, 1, 4)}, ...
            'error1x2x4',            {ones(1, 2, 4)}, ...
            'error4x1x2',            {ones(4, 1, 2)}, ...
            'error1x4x2',            {ones(1, 4, 2)}  ...
        );
    end

    properties(Access=private)
        mBasePath
    end

    methods(TestClassSetup)
        function setupPath(self)
            self.mBasePath = fileparts(fileparts(mfilename('fullpath')));
            addpath(self.mBasePath);
            rehash;
        end
    end

    methods(Test)
        function testNoDimDouble(self, dataNoDimNumeric)
            self.verifyEqual(select(@(x) mod(x, 2) == 0, double(dataNoDimNumeric.in)), double(dataNoDimNumeric.out));
        end
        function testDimDouble(self, dataDimNumeric)
            self.verifyEqual(select(dataDimNumeric.fun, double(dataDimNumeric.in), dataDimNumeric.dim), double(dataDimNumeric.out));
        end
        function testNoDimSingle(self, dataNoDimNumeric)
            self.verifyEqual(select(@(x) mod(x, 2) == 0, single(dataNoDimNumeric.in)), single(dataNoDimNumeric.out));
        end
        function testDimSingme(self, dataDimNumeric)
            self.verifyEqual(select(dataDimNumeric.fun, single(dataDimNumeric.in), dataDimNumeric.dim), single(dataDimNumeric.out));
        end
        function testNoDimUint8(self, dataNoDimNumeric)
            self.verifyEqual(select(@(x) mod(x, 2) == 0, uint8(dataNoDimNumeric.in)), uint8(dataNoDimNumeric.out));
        end
        function testDimUint8(self, dataDimNumeric)
            self.verifyEqual(select(dataDimNumeric.fun, uint8(dataDimNumeric.in), dataDimNumeric.dim), uint8(dataDimNumeric.out));
        end
        function testNoDimInt8(self, dataNoDimNumeric)
            self.verifyEqual(select(@(x) mod(x, 2) == 0, int8(dataNoDimNumeric.in)), int8(dataNoDimNumeric.out));
        end
        function testDimInt8(self, dataDimNumeric)
            self.verifyEqual(select(dataDimNumeric.fun, int8(dataDimNumeric.in), dataDimNumeric.dim), int8(dataDimNumeric.out));
        end
        function testNoDimUint16(self, dataNoDimNumeric)
            self.verifyEqual(select(@(x) mod(x, 2) == 0, uint16(dataNoDimNumeric.in)), uint16(dataNoDimNumeric.out));
        end
        function testDimUint16(self, dataDimNumeric)
            self.verifyEqual(select(dataDimNumeric.fun, uint16(dataDimNumeric.in), dataDimNumeric.dim), uint16(dataDimNumeric.out));
        end
        function testNoDimInt16(self, dataNoDimNumeric)
            self.verifyEqual(select(@(x) mod(x, 2) == 0, int16(dataNoDimNumeric.in)), int16(dataNoDimNumeric.out));
        end
        function testDimInt16(self, dataDimNumeric)
            self.verifyEqual(select(dataDimNumeric.fun, int16(dataDimNumeric.in), dataDimNumeric.dim), int16(dataDimNumeric.out));
        end
        function testNoDimUint32(self, dataNoDimNumeric)
            self.verifyEqual(select(@(x) mod(x, 2) == 0, uint32(dataNoDimNumeric.in)), uint32(dataNoDimNumeric.out));
        end
        function testDimUint32(self, dataDimNumeric)
            self.verifyEqual(select(dataDimNumeric.fun, uint32(dataDimNumeric.in), dataDimNumeric.dim), uint32(dataDimNumeric.out));
        end
        function testNoDimInt32(self, dataNoDimNumeric)
            self.verifyEqual(select(@(x) mod(x, 2) == 0, int32(dataNoDimNumeric.in)), int32(dataNoDimNumeric.out));
        end
        function testDimInt32(self, dataDimNumeric)
            self.verifyEqual(select(dataDimNumeric.fun, int32(dataDimNumeric.in), dataDimNumeric.dim), int32(dataDimNumeric.out));
        end
        function testNoDimUint64(self, dataNoDimNumeric)
            self.verifyEqual(select(@(x) mod(x, 2) == 0, uint64(dataNoDimNumeric.in)), uint64(dataNoDimNumeric.out));
        end
        function testDimUint64(self, dataDimNumeric)
            self.verifyEqual(select(dataDimNumeric.fun, uint64(dataDimNumeric.in), dataDimNumeric.dim), uint64(dataDimNumeric.out));
        end
        function testNoDimInt64(self, dataNoDimNumeric)
            self.verifyEqual(select(@(x) mod(x, 2) == 0, int64(dataNoDimNumeric.in)), int64(dataNoDimNumeric.out));
        end
        function testDimInt64(self, dataDimNumeric)
            self.verifyEqual(select(dataDimNumeric.fun, int64(dataDimNumeric.in), dataDimNumeric.dim), int64(dataDimNumeric.out));
        end
        function testNoDimCell(self, dataNoDimCell)
            self.verifyEqual(select(dataNoDimCell.fun, dataNoDimCell.in), dataNoDimCell.out);
        end
        function testDimCell(self, dataDimCell)
            self.verifyEqual(select(dataDimCell.fun, dataDimCell.in, dataDimCell.dim), dataDimCell.out);
        end
        function testChar(self, dataChar)
            self.verifyEqual(select(@(l) l == upper(l), dataChar.in), dataChar.out);
        end
        function testNoDimStruct(self, dataNoDimStruct)
            self.verifyEqual(select(@(s) mod(s.f1, 2) == 0, dataNoDimStruct.in), dataNoDimStruct.out);
        end
        function testDimStruct(self, dataDimStruct)
            self.verifyEqual(select(dataDimStruct.fun, dataDimStruct.in, dataDimStruct.dim), dataDimStruct.out);
        end
        function testErrorType(self, dataType)
            self.verifyError(@() select(@(x) true, dataType), 'select:BadArgument');
        end
        function testErrorNoDim(self, dataErrorNoDim)
            self.verifyError(@() select(@(x) true, dataErrorNoDim), 'select:BadArgument');
        end
    end

    methods(TestClassTeardown)
        function teardownPath(self)
            rmpath(self.mBasePath);
            rehash;
        end
    end

    methods(Static, Access=private)
        function C = mat2cell(A)
            C = arrayfun(@(x) x, A, 'UniformOutput', false);
        end
    end
end