classdef TestXLSFile < matlab.unittest.TestCase
    properties(TestParameter)
        sensitivityLabelName
        addTestData = struct(                                                                                                            ...
            'InsertFirst',              struct('name', 'NewSheet', 'place',  0, 'sheets', {{'NewSheet', 'InitialSheet', 'OtherSheet'}}), ...
            'InsertSecond',             struct('name', 'NewSheet', 'place',  1, 'sheets', {{'InitialSheet', 'NewSheet', 'OtherSheet'}}), ...
            'InsertLast',               struct('name', 'NewSheet', 'place',  2, 'sheets', {{'InitialSheet', 'OtherSheet', 'NewSheet'}}), ...
            'InsertAfterLast',          struct('name', 'NewSheet', 'place',  3, 'sheets', {{'InitialSheet', 'OtherSheet', 'NewSheet'}}), ...
            'ReverseInsertLast',        struct('name', 'NewSheet', 'place', -1, 'sheets', {{'InitialSheet', 'OtherSheet', 'NewSheet'}}), ...
            'ReverseInsertSecond',      struct('name', 'NewSheet', 'place', -2, 'sheets', {{'InitialSheet', 'NewSheet', 'OtherSheet'}}), ...
            'ReverseInsertFirst',       struct('name', 'NewSheet', 'place', -3, 'sheets', {{'NewSheet', 'InitialSheet', 'OtherSheet'}}), ...
            'ReverseInsertBeforeFirst', struct('name', 'NewSheet', 'place', -4, 'sheets', {{'NewSheet', 'InitialSheet', 'OtherSheet'}})  ...
        )
        toXLSLineData = struct(                           ...
            'A',   struct('matlab',   1, 'excel',   '1'), ...
            'Z',   struct('matlab',  26, 'excel',  '26'), ...
            'AA',  struct('matlab',  27, 'excel',  '27'), ...
            'AZ',  struct('matlab',  52, 'excel',  '52'), ...
            'BA',  struct('matlab',  53, 'excel',  '53'), ...
            'ZZ',  struct('matlab', 702, 'excel', '702'), ...
            'AAA', struct('matlab', 703, 'excel', '703')  ...
        )
        toXLSColumnData = struct(                         ...
            'A',   struct('matlab',   1, 'excel',   'A'), ...
            'Z',   struct('matlab',  26, 'excel',   'Z'), ...
            'AA',  struct('matlab',  27, 'excel',  'AA'), ...
            'AZ',  struct('matlab',  52, 'excel',  'AZ'), ...
            'BA',  struct('matlab',  53, 'excel',  'BA'), ...
            'ZZ' , struct('matlab', 702, 'excel',  'ZZ'), ...
            'AAA', struct('matlab', 703, 'excel', 'AAA')  ...
        )
        cellRefActiveData = struct(                                                                                                          ...
            'Double1x1',    struct('row', 1,         'col', 1,            'data', {{1.1}}),                                                  ...
            'Double2x2',    struct('row', 1:2,       'col', 1:2,          'data', {{1.1, 1.2; 2.1, 2.2}}),                                   ...
            'Double2x2Sep', struct('row', [1, 5],    'col', [1, 5],       'data', {{1.1, 1.5; 5.1, 5.5}}),                                   ...
            'Double3x3',    struct('row', 1:3,       'col', 1:3,          'data', {{1.1, 1.2, 1.3; 2.1, 2.2, 2.3; 3.1, 3.2, 3.3}}),          ...
            'Double3x3Sep', struct('row', [1, 3, 5], 'col', [1, 3, 5],    'data', {{1.1, 1.3, 1.5; 3.1, 3.3, 3.5; 5.1, 5.3, 5.5}}),          ...
            'Double2x3',    struct('row', 4:5,       'col', 1:3,          'data', {{4.1, 4.2, 4.3; 5.1, 5.2, 5.3}}),                         ...
            'Double3x2',    struct('row', 1:3,       'col', 4:5,          'data', {{1.4, 1.5; 2.4, 2.5; 3.4, 3.5}}),                         ...
            'Int1x1',       struct('row', 1,         'col', 11,           'data', {{11}}),                                                   ...
            'Int2x2',       struct('row', 1:2,       'col', 11:12,        'data', {{11, 12; 21, 22}}),                                       ...
            'Int2x2Sep',    struct('row', [1, 3],    'col', [11, 13],     'data', {{11, 13; 31, 33}}),                                       ...
            'Int3x3',       struct('row', 1:3,       'col', 11:13,        'data', {{11, 12, 13; 21, 22, 23; 31, 32, 33}}),                   ...
            'Int3x3Sep',    struct('row', [1, 3, 5], 'col', [11, 13, 15], 'data', {{11, 13, 15; 31, 33, 35; 51, 53, 55}}),                   ...
            'Int2x3',       struct('row', 4:5,       'col', 11:13,        'data', {{41, 42, 43; 51, 52, 53}}),                               ...
            'Int3x2',       struct('row', 1:3,       'col', 14:15,        'data', {{14, 15; 24, 25; 34, 35}}),                               ...
            'Char1x1',      struct('row', 1,         'col', 6,            'data', {{'F1'}}),                                                 ...
            'Char2x2',      struct('row', 1:2,       'col', 6:7,          'data', {{'F1', 'G1'; 'F2', 'G2'}}),                               ...
            'Char2x2Sep',   struct('row', [1, 3],    'col', [6, 8],       'data', {{'F1', 'H1'; 'F3', 'H3'}}),                               ...
            'Char3x3',      struct('row', 1:3,       'col', 6:8,          'data', {{'F1', 'G1', 'H1'; 'F2', 'G2', 'H2'; 'F3', 'G3', 'H3'}}), ...
            'Char3x3Sep',   struct('row', [1, 3, 5], 'col', [6, 8, 10],   'data', {{'F1', 'H1', 'J1'; 'F3', 'H3', 'J3'; 'F5', 'H5', 'J5'}}), ...
            'Char2x3',      struct('row', 4:5,       'col', 6:8,          'data', {{'F4', 'G4', 'H4'; 'F5', 'G5', 'H5'}}),                   ...
            'Char3x2',      struct('row', 1:3,       'col', 9:10,         'data', {{'I1', 'J1'; 'I2', 'J2'; 'I3', 'J3'}}),                   ...
            'Empty1x1',     struct('row', 1,         'col', 16,           'data', {cell(1, 1)}),                                             ...
            'Empty2x2',     struct('row', 1:2,       'col', 16:17,        'data', {cell(2, 2)}),                                             ...
            'Empty2x2Sep',  struct('row', [1, 5],    'col', [16, 18],     'data', {cell(2, 2)}),                                             ...
            'Empty3x3',     struct('row', 1:3,       'col', 16:18,        'data', {cell(3, 3)}),                                             ...
            'Empty3x3Sep',  struct('row', [1, 3, 5], 'col', [16, 18, 20], 'data', {cell(3, 3)}),                                             ...
            'Empty2x3',     struct('row', 4:5,       'col', 16:18,        'data', {cell(2, 3)}),                                             ...
            'Empty3x2',     struct('row', 1:3,       'col', 19:20,        'data', {cell(3, 2)}),                                             ...
            'Mixed1x2',     struct('row', 1,         'col', 5:6,          'data', {{1.5, 'F1'}}),                                            ...
            'Mixed1x2Sep',  struct('row', 1,         'col', [4, 7],       'data', {{1.4, 'G1'}})                                             ...
        )
        matrixRefActiveData = struct(                                                                                             ...
            'Double1x1',    struct('row', 1,         'col', 1,            'data', 1.1),                                           ...
            'Double2x2',    struct('row', 1:2,       'col', 1:2,          'data', [1.1, 1.2; 2.1, 2.2]),                          ...
            'Double2x2Sep', struct('row', [1, 5],    'col', [1, 5],       'data', [1.1, 1.5; 5.1, 5.5]),                          ...
            'Double3x3',    struct('row', 1:3,       'col', 1:3,          'data', [1.1, 1.2, 1.3; 2.1, 2.2, 2.3; 3.1, 3.2, 3.3]), ...
            'Double3x3Sep', struct('row', [1, 3, 5], 'col', [1, 3, 5],    'data', [1.1, 1.3, 1.5; 3.1, 3.3, 3.5; 5.1, 5.3, 5.5]), ...
            'Double2x3',    struct('row', 4:5,       'col', 1:3,          'data', [4.1, 4.2, 4.3; 5.1, 5.2, 5.3]),                ...
            'Double3x2',    struct('row', 1:3,       'col', 4:5,          'data', [1.4, 1.5; 2.4, 2.5; 3.4, 3.5]),                ...
            'Int1x1',       struct('row', 1,         'col', 11,           'data', 11),                                            ...
            'Int2x2',       struct('row', 1:2,       'col', 11:12,        'data', [11, 12; 21, 22]),                              ...
            'Int2x2Sep',    struct('row', [1, 3],    'col', [11, 13],     'data', [11, 13; 31, 33]),                              ...
            'Int3x3',       struct('row', 1:3,       'col', 11:13,        'data', [11, 12, 13; 21, 22, 23; 31, 32, 33]),          ...
            'Int3x3Sep',    struct('row', [1, 3, 5], 'col', [11, 13, 15], 'data', [11, 13, 15; 31, 33, 35; 51, 53, 55]),          ...
            'Int2x3',       struct('row', 4:5,       'col', 11:13,        'data', [41, 42, 43; 51, 52, 53]),                      ...
            'Int3x2',       struct('row', 1:3,       'col', 14:15,        'data', [14, 15; 24, 25; 34, 35]),                      ...
            'Char1x1',      struct('row', 1,         'col', 6,            'data', 'F1'),                                          ...
            'Char2x2',      struct('row', 1:2,       'col', 6:7,          'data', nan(2, 2)),                                     ...
            'Char2x2Sep',   struct('row', [1, 3],    'col', [6, 8],       'data', nan(2, 2)),                                     ...
            'Char3x3',      struct('row', 1:3,       'col', 6:8,          'data', nan(3, 3)),                                     ...
            'Char3x3Sep',   struct('row', [1, 3, 5], 'col', [6, 8, 10],   'data', nan(3, 3)),                                     ...
            'Char2x3',      struct('row', 4:5,       'col', 6:8,          'data', nan(2, 3)),                                     ...
            'Char3x2',      struct('row', 1:3,       'col', 9:10,         'data', nan(3, 2)),                                     ...
            'Empty1x1',     struct('row', 1,         'col', 16,           'data', ''),                                            ...
            'Empty2x2',     struct('row', 1:2,       'col', 16:17,        'data', nan(2, 2)),                                     ...
            'Empty2x2Sep',  struct('row', [1, 5],    'col', [16, 18],     'data', nan(2, 2)),                                     ...
            'Empty3x3',     struct('row', 1:3,       'col', 16:18,        'data', nan(3, 3)),                                     ...
            'Empty3x3Sep',  struct('row', [1, 3, 5], 'col', [16, 18, 20], 'data', nan(3, 3)),                                     ...
            'Empty2x3',     struct('row', 4:5,       'col', 16:18,        'data', nan(2, 3)),                                     ...
            'Empty3x2',     struct('row', 1:3,       'col', 19:20,        'data', nan(3, 2)),                                     ...
            'Mixed1x2',     struct('row', 1,         'col', 5:6,          'data', [1.5, nan]),                                    ...
            'Mixed1x2Sep',  struct('row', 1,         'col', [4, 7],       'data', [1.4, nan])                                     ...
        )
        cellRefOtherData = struct(                                                                                                                    ...
            'Double1x1',    struct('row', 1,         'col', 1,            'data', {{11.11}}),                                                         ...
            'Double2x2',    struct('row', 1:2,       'col', 1:2,          'data', {{11.11, 11.22; 22.11, 22.22}}),                                    ...
            'Double2x2Sep', struct('row', [1, 5],    'col', [1, 5],       'data', {{11.11, 11.55; 55.11, 55.55}}),                                    ...
            'Double3x3',    struct('row', 1:3,       'col', 1:3,          'data', {{11.11, 11.22, 11.33; 22.11, 22.22, 22.33; 33.11, 33.22, 33.33}}), ...
            'Double3x3Sep', struct('row', [1, 3, 5], 'col', [1, 3, 5],    'data', {{11.11, 11.33, 11.55; 33.11, 33.33, 33.55; 55.11, 55.33, 55.55}}), ...
            'Double2x3',    struct('row', 4:5,       'col', 1:3,          'data', {{44.11, 44.22, 44.33; 55.11, 55.22, 55.33}}),                      ...
            'Double3x2',    struct('row', 1:3,       'col', 4:5,          'data', {{11.44, 11.55; 22.44, 22.55; 33.44, 33.55}}),                      ...
            'Int1x1',       struct('row', 1,         'col', 11,           'data', {{1111}}),                                                          ...
            'Int2x2',       struct('row', 1:2,       'col', 11:12,        'data', {{1111, 1122; 2211, 2222}}),                                        ...
            'Int2x2Sep',    struct('row', [1, 3],    'col', [11, 13],     'data', {{1111, 1133; 3311, 3333}}),                                        ...
            'Int3x3',       struct('row', 1:3,       'col', 11:13,        'data', {{1111, 1122, 1133; 2211, 2222, 2233; 3311, 3322, 3333}}),          ...
            'Int3x3Sep',    struct('row', [1, 3, 5], 'col', [11, 13, 15], 'data', {{1111, 1133, 1155; 3311, 3333, 3355; 5511, 5533, 5555}}),          ...
            'Int2x3',       struct('row', 4:5,       'col', 11:13,        'data', {{4411, 4422, 4433; 5511, 5522, 5533}}),                            ...
            'Int3x2',       struct('row', 1:3,       'col', 14:15,        'data', {{1144, 1155; 2244, 2255; 3344, 3355}}),                            ...
            'Char1x1',      struct('row', 1,         'col', 6,            'data', {{'f1'}}),                                                          ...
            'Char2x2',      struct('row', 1:2,       'col', 6:7,          'data', {{'f1', 'g1'; 'f2', 'g2'}}),                                        ...
            'Char2x2Sep',   struct('row', [1, 3],    'col', [6, 8],       'data', {{'f1', 'h1'; 'f3', 'h3'}}),                                        ...
            'Char3x3',      struct('row', 1:3,       'col', 6:8,          'data', {{'f1', 'g1', 'h1'; 'f2', 'g2', 'h2'; 'f3', 'g3', 'h3'}}),          ...
            'Char3x3Sep',   struct('row', [1, 3, 5], 'col', [6, 8, 10],   'data', {{'f1', 'h1', 'j1'; 'f3', 'h3', 'j3'; 'f5', 'h5', 'j5'}}),          ...
            'Char2x3',      struct('row', 4:5,       'col', 6:8,          'data', {{'f4', 'g4', 'h4'; 'f5', 'g5', 'h5'}}),                            ...
            'Char3x2',      struct('row', 1:3,       'col', 9:10,         'data', {{'i1', 'j1'; 'i2', 'j2'; 'i3', 'j3'}}),                            ...
            'Empty1x1',     struct('row', 1,         'col', 16,           'data', {cell(1, 1)}),                                                      ...
            'Empty2x2',     struct('row', 1:2,       'col', 16:17,        'data', {cell(2, 2)}),                                                      ...
            'Empty2x2Sep',  struct('row', [1, 5],    'col', [16, 18],     'data', {cell(2, 2)}),                                                      ...
            'Empty3x3',     struct('row', 1:3,       'col', 16:18,        'data', {cell(3, 3)}),                                                      ...
            'Empty3x3Sep',  struct('row', [1, 3, 5], 'col', [16, 18, 20], 'data', {cell(3, 3)}),                                                      ...
            'Empty2x3',     struct('row', 4:5,       'col', 16:18,        'data', {cell(2, 3)}),                                                      ...
            'Empty3x2',     struct('row', 1:3,       'col', 19:20,        'data', {cell(3, 2)}),                                                      ...
            'Mixed1x2',     struct('row', 1,         'col', 5:6,          'data', {{11.55, 'f1'}}),                                                   ...
            'Mixed1x2Sep',  struct('row', 1,         'col', [4, 7],       'data', {{11.44, 'g1'}})                                                    ...
        )
        matrixRefOtherData = struct(                                                                                                                ...
            'Double1x1',    struct('row', 1,         'col', 1,            'data', 11.11),                                                           ...
            'Double2x2',    struct('row', 1:2,       'col', 1:2,          'data', [11.11, 11.22; 22.11, 22.22]),                                    ...
            'Double2x2Sep', struct('row', [1, 5],    'col', [1, 5],       'data', [11.11, 11.55; 55.11, 55.55]),                                    ...
            'Double3x3',    struct('row', 1:3,       'col', 1:3,          'data', [11.11, 11.22, 11.33; 22.11, 22.22, 22.33; 33.11, 33.22, 33.33]), ...
            'Double3x3Sep', struct('row', [1, 3, 5], 'col', [1, 3, 5],    'data', [11.11, 11.33, 11.55; 33.11, 33.33, 33.55; 55.11, 55.33, 55.55]), ...
            'Double2x3',    struct('row', 4:5,       'col', 1:3,          'data', [44.11, 44.22, 44.33; 55.11, 55.22, 55.33]),                      ...
            'Double3x2',    struct('row', 1:3,       'col', 4:5,          'data', [11.44, 11.55; 22.44, 22.55; 33.44, 33.55]),                      ...
            'Int1x1',       struct('row', 1,         'col', 11,           'data', 1111),                                                            ...
            'Int2x2',       struct('row', 1:2,       'col', 11:12,        'data', [1111, 1122; 2211, 2222]),                                        ...
            'Int2x2Sep',    struct('row', [1, 3],    'col', [11, 13],     'data', [1111, 1133; 3311, 3333]),                                        ...
            'Int3x3',       struct('row', 1:3,       'col', 11:13,        'data', [1111, 1122, 1133; 2211, 2222, 2233; 3311, 3322, 3333]),          ...
            'Int3x3Sep',    struct('row', [1, 3, 5], 'col', [11, 13, 15], 'data', [1111, 1133, 1155; 3311, 3333, 3355; 5511, 5533, 5555]),          ...
            'Int2x3',       struct('row', 4:5,       'col', 11:13,        'data', [4411, 4422, 4433; 5511, 5522, 5533]),                            ...
            'Int3x2',       struct('row', 1:3,       'col', 14:15,        'data', [1144, 1155; 2244, 2255; 3344, 3355]),                            ...
            'Char1x1',      struct('row', 1,         'col', 6,            'data', 'f1'),                                                            ...
            'Char2x2',      struct('row', 1:2,       'col', 6:7,          'data', nan(2, 2)),                                                       ...
            'Char2x2Sep',   struct('row', [1, 3],    'col', [6, 8],       'data', nan(2, 2)),                                                       ...
            'Char3x3',      struct('row', 1:3,       'col', 6:8,          'data', nan(3, 3)),                                                       ...
            'Char3x3Sep',   struct('row', [1, 3, 5], 'col', [6, 8, 10],   'data', nan(3, 3)),                                                       ...
            'Char2x3',      struct('row', 4:5,       'col', 6:8,          'data', nan(2, 3)),                                                       ...
            'Char3x2',      struct('row', 1:3,       'col', 9:10,         'data', nan(3, 2)),                                                       ...
            'Empty1x1',     struct('row', 1,         'col', 16,           'data', ''),                                                              ...
            'Empty2x2',     struct('row', 1:2,       'col', 16:17,        'data', nan(2, 2)),                                                       ...
            'Empty2x2Sep',  struct('row', [1, 5],    'col', [16, 18],     'data', nan(2, 2)),                                                       ...
            'Empty3x3',     struct('row', 1:3,       'col', 16:18,        'data', nan(3, 3)),                                                       ...
            'Empty3x3Sep',  struct('row', [1, 3, 5], 'col', [16, 18, 20], 'data', nan(3, 3)),                                                       ...
            'Empty2x3',     struct('row', 4:5,       'col', 16:18,        'data', nan(2, 3)),                                                       ...
            'Empty3x2',     struct('row', 1:3,       'col', 19:20,        'data', nan(3, 2)),                                                       ...
            'Mixed1x2',     struct('row', 1,         'col', 5:6,          'data', [11.55, nan]),                                                    ...
            'Mixed1x2Sep',  struct('row', 1,         'col', [4, 7],       'data', [11.44, nan])                                                     ...
        )
        cellSetActiveData = struct(                                                                                                                                                                                                         ...
            'Double1x1',         struct('row', 1,         'col', 1,            'oldData', {{1.1}},                                                  'newData', {{10.01}}),                                                                  ...
            'Double2x2',         struct('row', 1:2,       'col', 1:2,          'oldData', {{1.1, 1.2; 2.1, 2.2}},                                   'newData', {{10.01, 10.02; 20.01, 20.20}}),                                             ...
            'Double2x2Sep',      struct('row', [1, 5],    'col', [1, 5],       'oldData', {{1.1, 1.5; 5.1, 5.5}},                                   'newData', {{10.01, 10.05; 50.01, 50.50}}),                                             ...
            'Double3x3',         struct('row', 1:3,       'col', 1:3,          'oldData', {{1.1, 1.2, 1.3; 2.1, 2.2, 2.3; 3.1, 3.2, 3.3}},          'newData', {{10.01, 10.02, 10.03; 20.10, 20.02, 20.30; 30.01, 30.02, 30.03}}),          ...
            'Double3x3Sep',      struct('row', [1, 3, 5], 'col', [1, 3, 5],    'oldData', {{1.1, 1.3, 1.5; 3.1, 3.3, 3.5; 5.1, 5.3, 5.5}},          'newData', {{10.01, 10.03, 10.05; 30.10, 30.03, 30.50; 50.01, 50.03, 50.05}}),          ...
            'Double2x3',         struct('row', 4:5,       'col', 1:3,          'oldData', {{4.1, 4.2, 4.3; 5.1, 5.2, 5.3}},                         'newData', {{40.01, 40.02, 40.03; 50.10, 50.02, 50.30}}),                               ...
            'Double3x2',         struct('row', 1:3,       'col', 4:5,          'oldData', {{1.4, 1.5; 2.4, 2.5; 3.4, 3.5}},                         'newData', {{10.04, 10.05; 20.04, 20.50; 30.04, 30.50}}),                               ...
            'Int1x1',            struct('row', 1,         'col', 11,           'oldData', {{11}},                                                   'newData', {{1001}}),                                                                   ...
            'Int2x2',            struct('row', 1:2,       'col', 11:12,        'oldData', {{11, 12; 21, 22}},                                       'newData', {{1001, 1002; 2001, 2002}}),                                                 ...
            'Int2x2Sep',         struct('row', [1, 3],    'col', [11, 13],     'oldData', {{11, 13; 31, 33}},                                       'newData', {{1001, 1005; 5001, 5005}}),                                                 ...
            'Int3x3',            struct('row', 1:3,       'col', 11:13,        'oldData', {{11, 12, 13; 21, 22, 23; 31, 32, 33}},                   'newData', {{1001, 1002, 1003; 2001, 2002, 2003; 3001, 3002, 3003}}),                   ...
            'Int3x3Sep',         struct('row', [1, 3, 5], 'col', [11, 13, 15], 'oldData', {{11, 13, 15; 31, 33, 35; 51, 53, 55}},                   'newData', {{1001, 1003, 1005; 3001, 3003, 3005; 5001, 5003, 5005}}),                   ...
            'Int2x3',            struct('row', 4:5,       'col', 11:13,        'oldData', {{41, 42, 43; 51, 52, 53}},                               'newData', {{4001, 4002, 4003; 5001, 5002, 5003}}),                                     ...
            'Int3x2',            struct('row', 1:3,       'col', 14:15,        'oldData', {{14, 15; 24, 25; 34, 35}},                               'newData', {{1004, 1005; 2004, 2005; 3004, 3005}}),                                     ...
            'Char1x1',           struct('row', 1,         'col', 6,            'oldData', {{'F1'}},                                                 'newData', {{'F001'}}),                                                                 ...
            'Char2x2',           struct('row', 1:2,       'col', 6:7,          'oldData', {{'F1', 'G1'; 'F2', 'G2'}},                               'newData', {{'F001', 'G001'; 'F003', 'G003'}}),                                         ...
            'Char2x2Sep',        struct('row', [1, 3],    'col', [6, 8],       'oldData', {{'F1', 'H1'; 'F3', 'H3'}},                               'newData', {{'F001', 'H001'; 'F003', 'H003'}}),                                         ...
            'Char3x3',           struct('row', 1:3,       'col', 6:8,          'oldData', {{'F1', 'G1', 'H1'; 'F2', 'G2', 'H2'; 'F3', 'G3', 'H3'}}, 'newData', {{'F001', 'G001', 'H001'; 'F002', 'G002', 'H002'; 'F003', 'G003', 'H003'}}), ...
            'Char3x3Sep',        struct('row', [1, 3, 5], 'col', [6, 8, 10],   'oldData', {{'F1', 'H1', 'J1'; 'F3', 'H3', 'J3'; 'F5', 'H5', 'J5'}}, 'newData', {{'F001', 'H001', 'J001'; 'F003', 'H003', 'J003'; 'F005', 'H005', 'J005'}}), ...
            'Char2x3',           struct('row', 4:5,       'col', 6:8,          'oldData', {{'F4', 'G4', 'H4'; 'F5', 'G5', 'H5'}},                   'newData', {{'F004', 'G004', 'H004'; 'F005', 'G005', 'H005'}}),                         ...
            'Char3x2',           struct('row', 1:3,       'col', 9:10,         'oldData', {{'I1', 'J1'; 'I2', 'J2'; 'I3', 'J3'}},                   'newData', {{'I001', 'J001'; 'I002', 'J002'; 'I003', 'J003'}}),                         ...
            'EmptyDouble1x1',    struct('row', 1,         'col', 16,           'oldData', {cell(1, 1)},                                             'newData', {{10.01}}),                                                                  ...
            'EmptyDouble2x2',    struct('row', 1:2,       'col', 16:17,        'oldData', {cell(2, 2)},                                             'newData', {{10.01, 10.02; 20.01, 20.02}}),                                             ...
            'EmptyDouble2x2Sep', struct('row', [1, 5],    'col', [16, 18],     'oldData', {cell(2, 2)},                                             'newData', {{10.01, 10.05; 50.01, 50.05}}),                                             ...
            'EmptyDouble3x3',    struct('row', 1:3,       'col', 16:18,        'oldData', {cell(3, 3)},                                             'newData', {{10.01, 10.02, 10.03; 20.01, 20.02, 20.03; 30.01, 30.02, 30.03}}),          ...
            'EmptyDouble3x3Sep', struct('row', [1, 3, 5], 'col', [16, 18, 20], 'oldData', {cell(3, 3)},                                             'newData', {{10.01, 10.03, 10.05; 30.01, 30.03, 30.05; 50.01, 50.03, 50.05}}),          ...
            'EmptyDouble2x3',    struct('row', 4:5,       'col', 16:18,        'oldData', {cell(2, 3)},                                             'newData', {{40.01, 40.02, 40.03; 50.01, 50.02, 50.03}}),                               ...
            'EmptyDouble3x2',    struct('row', 1:3,       'col', 19:20,        'oldData', {cell(3, 2)},                                             'newData', {{10.04, 10.05; 20.04, 20.05; 30.04, 30.05}}),                               ...
            'EmptyInt1x1',       struct('row', 1,         'col', 16,           'oldData', {cell(1, 1)},                                             'newData', {{1001}}),                                                                   ...
            'EmptyInt2x2',       struct('row', 1:2,       'col', 16:17,        'oldData', {cell(2, 2)},                                             'newData', {{1001, 1002; 2001, 2002}}),                                                 ...
            'EmptyInt2x2Sep',    struct('row', [1, 5],    'col', [16, 18],     'oldData', {cell(2, 2)},                                             'newData', {{1001, 1005; 5001, 5005}}),                                                 ...
            'EmptyInt3x3',       struct('row', 1:3,       'col', 16:18,        'oldData', {cell(3, 3)},                                             'newData', {{1001, 1002, 1003; 2001, 2002, 2003; 3001, 3002, 3003}}),                   ...
            'EmptyInt3x3Sep',    struct('row', [1, 3, 5], 'col', [16, 18, 20], 'oldData', {cell(3, 3)},                                             'newData', {{1001, 1003, 1005; 3001, 3003, 3005; 5001, 5003, 5005}}),                   ...
            'EmptyInt2x3',       struct('row', 4:5,       'col', 16:18,        'oldData', {cell(2, 3)},                                             'newData', {{4001, 4002, 4003; 5001, 5002, 5003}}),                                     ...
            'EmptyInt3x2',       struct('row', 1:3,       'col', 19:20,        'oldData', {cell(3, 2)},                                             'newData', {{1004, 1005; 2004, 2005; 3004, 3005}}),                                     ...
            'EmptyChar1x1',      struct('row', 1,         'col', 6,            'oldData', {{'F1'}},                                                 'newData', {{'F001'}}),                                                                 ...
            'EmptyChar2x2',      struct('row', 1:2,       'col', 6:7,          'oldData', {{'F1', 'G1'; 'F2', 'G2'}},                               'newData', {{'F001', 'G001'; 'F003', 'G003'}}),                                         ...
            'EmptyChar2x2Sep',   struct('row', [1, 3],    'col', [6, 8],       'oldData', {{'F1', 'H1'; 'F3', 'H3'}},                               'newData', {{'F001', 'H001'; 'F003', 'H003'}}),                                         ...
            'EmptyChar3x3',      struct('row', 1:3,       'col', 6:8,          'oldData', {{'F1', 'G1', 'H1'; 'F2', 'G2', 'H2'; 'F3', 'G3', 'H3'}}, 'newData', {{'F001', 'G001', 'H001'; 'F002', 'G002', 'H002'; 'F003', 'G003', 'H003'}}), ...
            'EmptyChar3x3Sep',   struct('row', [1, 3, 5], 'col', [6, 8, 10],   'oldData', {{'F1', 'H1', 'J1'; 'F3', 'H3', 'J3'; 'F5', 'H5', 'J5'}}, 'newData', {{'F001', 'H001', 'J001'; 'F003', 'H003', 'J003'; 'F005', 'H005', 'J005'}}), ...
            'EmptyChar2x3',      struct('row', 4:5,       'col', 6:8,          'oldData', {{'F4', 'G4', 'H4'; 'F5', 'G5', 'H5'}},                   'newData', {{'F004', 'G004', 'H004'; 'F005', 'G005', 'H005'}}),                         ...
            'EmptyChar3x2',      struct('row', 1:3,       'col', 9:10,         'oldData', {{'I1', 'J1'; 'I2', 'J2'; 'I3', 'J3'}},                   'newData', {{'I001', 'J001'; 'I002', 'J002'; 'I003', 'J003'}}),                         ...
            'Mixed1x2',          struct('row', 1,         'col', 5:6,          'oldData', {{1.5, 'F1'}},                                            'newData', {{10.05, 'F001'}}),                                                          ...
            'Mixed1x2Sep',       struct('row', 1,         'col', [4, 7],       'oldData', {{1.4, 'G1'}},                                            'newData', {{10.04, 'G001'}}),                                                          ...
            'DoubleEmpty1x1',    struct('row', 1,         'col', 1,            'oldData', {{1.1}},                                                  'newData', {cell(1, 1)}),                                                               ...
            'DoubleEmpty2x2',    struct('row', 1:2,       'col', 1:2,          'oldData', {{1.1, 1.2; 2.1, 2.2}},                                   'newData', {cell(2, 2)}),                                                               ...
            'DoubleEmpty2x2Sep', struct('row', [1, 5],    'col', [1, 5],       'oldData', {{1.1, 1.5; 5.1, 5.5}},                                   'newData', {cell(2, 2)}),                                                               ...
            'DoubleEmpty3x3',    struct('row', 1:3,       'col', 1:3,          'oldData', {{1.1, 1.2, 1.3; 2.1, 2.2, 2.3; 3.1, 3.2, 3.3}},          'newData', {cell(3, 3)}),                                                               ...
            'DoubleEmpty3x3Sep', struct('row', [1, 3, 5], 'col', [1, 3, 5],    'oldData', {{1.1, 1.3, 1.5; 3.1, 3.3, 3.5; 5.1, 5.3, 5.5}},          'newData', {cell(3, 3)}),                                                               ...
            'DoubleEmpty2x3',    struct('row', 4:5,       'col', 1:3,          'oldData', {{4.1, 4.2, 4.3; 5.1, 5.2, 5.3}},                         'newData', {cell(2, 3)}),                                                               ...
            'DoubleEmpty3x2',    struct('row', 1:3,       'col', 4:5,          'oldData', {{1.4, 1.5; 2.4, 2.5; 3.4, 3.5}},                         'newData', {cell(3, 2)}),                                                               ...
            'IntEmpty1x1',       struct('row', 1,         'col', 11,           'oldData', {{11}},                                                   'newData', {cell(1, 1)}),                                                               ...
            'IntEmpty2x2',       struct('row', 1:2,       'col', 11:12,        'oldData', {{11, 12; 21, 22}},                                       'newData', {cell(2, 2)}),                                                               ...
            'IntEmpty2x2Sep',    struct('row', [1, 3],    'col', [11, 13],     'oldData', {{11, 13; 31, 33}},                                       'newData', {cell(2, 2)}),                                                               ...
            'IntEmpty3x3',       struct('row', 1:3,       'col', 11:13,        'oldData', {{11, 12, 13; 21, 22, 23; 31, 32, 33}},                   'newData', {cell(3, 3)}),                                                               ...
            'IntEmpty3x3Sep',    struct('row', [1, 3, 5], 'col', [11, 13, 15], 'oldData', {{11, 13, 15; 31, 33, 35; 51, 53, 55}},                   'newData', {cell(3, 3)}),                                                               ...
            'IntEmpty2x3',       struct('row', 4:5,       'col', 11:13,        'oldData', {{41, 42, 43; 51, 52, 53}},                               'newData', {cell(2, 3)}),                                                               ...
            'IntEmpty3x2',       struct('row', 1:3,       'col', 14:15,        'oldData', {{14, 15; 24, 25; 34, 35}},                               'newData', {cell(3, 2)}),                                                               ...
            'CharEmpty1x1',      struct('row', 1,         'col', 6,            'oldData', {{'F1'}},                                                 'newData', {cell(1, 1)}),                                                               ...
            'CharEmpty2x2',      struct('row', 1:2,       'col', 6:7,          'oldData', {{'F1', 'G1'; 'F2', 'G2'}},                               'newData', {cell(2, 2)}),                                                               ...
            'CharEmpty2x2Sep',   struct('row', [1, 3],    'col', [6, 8],       'oldData', {{'F1', 'H1'; 'F3', 'H3'}},                               'newData', {cell(2, 2)}),                                                               ...
            'CharEmpty3x3',      struct('row', 1:3,       'col', 6:8,          'oldData', {{'F1', 'G1', 'H1'; 'F2', 'G2', 'H2'; 'F3', 'G3', 'H3'}}, 'newData', {cell(3, 3)}),                                                               ...
            'CharEmpty3x3Sep',   struct('row', [1, 3, 5], 'col', [6, 8, 10],   'oldData', {{'F1', 'H1', 'J1'; 'F3', 'H3', 'J3'; 'F5', 'H5', 'J5'}}, 'newData', {cell(3, 3)}),                                                               ...
            'CharEmpty2x3',      struct('row', 4:5,       'col', 6:8,          'oldData', {{'F4', 'G4', 'H4'; 'F5', 'G5', 'H5'}},                   'newData', {cell(2, 3)}),                                                               ...
            'CharEmpty3x2',      struct('row', 1:3,       'col', 9:10,         'oldData', {{'I1', 'J1'; 'I2', 'J2'; 'I3', 'J3'}},                   'newData', {cell(3, 2)})                                                                ...
        )
        matrixSetActiveData = struct(                                                                                                                                                                                                                                                                                ...
            'Double1x1',         struct('row', 1,         'col', 1,            'oldData', {{1.1}},                                                  'data', 10.01,                                                           'newData', {{10.01}}),                                                                  ...
            'Double2x2',         struct('row', 1:2,       'col', 1:2,          'oldData', {{1.1, 1.2; 2.1, 2.2}},                                   'data', [10.01, 10.02; 20.01, 20.20],                                    'newData', {{10.01, 10.02; 20.01, 20.20}}),                                             ...
            'Double2x2Sep',      struct('row', [1, 5],    'col', [1, 5],       'oldData', {{1.1, 1.5; 5.1, 5.5}},                                   'data', [10.01, 10.05; 50.01, 50.50],                                    'newData', {{10.01, 10.05; 50.01, 50.50}}),                                             ...
            'Double3x3',         struct('row', 1:3,       'col', 1:3,          'oldData', {{1.1, 1.2, 1.3; 2.1, 2.2, 2.3; 3.1, 3.2, 3.3}},          'data', [10.01, 10.02, 10.03; 20.10, 20.02, 20.30; 30.01, 30.02, 30.03], 'newData', {{10.01, 10.02, 10.03; 20.10, 20.02, 20.30; 30.01, 30.02, 30.03}}),          ...
            'Double3x3Sep',      struct('row', [1, 3, 5], 'col', [1, 3, 5],    'oldData', {{1.1, 1.3, 1.5; 3.1, 3.3, 3.5; 5.1, 5.3, 5.5}},          'data', [10.01, 10.03, 10.05; 30.10, 30.03, 30.50; 50.01, 50.03, 50.05], 'newData', {{10.01, 10.03, 10.05; 30.10, 30.03, 30.50; 50.01, 50.03, 50.05}}),          ...
            'Double2x3',         struct('row', 4:5,       'col', 1:3,          'oldData', {{4.1, 4.2, 4.3; 5.1, 5.2, 5.3}},                         'data', [40.01, 40.02, 40.03; 50.10, 50.02, 50.30],                      'newData', {{40.01, 40.02, 40.03; 50.10, 50.02, 50.30}}),                               ...
            'Double3x2',         struct('row', 1:3,       'col', 4:5,          'oldData', {{1.4, 1.5; 2.4, 2.5; 3.4, 3.5}},                         'data', [10.04, 10.05; 20.04, 20.50; 30.04, 30.50],                      'newData', {{10.04, 10.05; 20.04, 20.50; 30.04, 30.50}}),                               ...
            'Int1x1',            struct('row', 1,         'col', 11,           'oldData', {{11}},                                                   'data', 1001,                                                            'newData', {{1001}}),                                                                   ...
            'Int2x2',            struct('row', 1:2,       'col', 11:12,        'oldData', {{11, 12; 21, 22}},                                       'data', [1001, 1002; 2001, 2002],                                        'newData', {{1001, 1002; 2001, 2002}}),                                                 ...
            'Int2x2Sep',         struct('row', [1, 3],    'col', [11, 13],     'oldData', {{11, 13; 31, 33}},                                       'data', [1001, 1005; 5001, 5005],                                        'newData', {{1001, 1005; 5001, 5005}}),                                                 ...
            'Int3x3',            struct('row', 1:3,       'col', 11:13,        'oldData', {{11, 12, 13; 21, 22, 23; 31, 32, 33}},                   'data', [1001, 1002, 1003; 2001, 2002, 2003; 3001, 3002, 3003],          'newData', {{1001, 1002, 1003; 2001, 2002, 2003; 3001, 3002, 3003}}),                   ...
            'Int3x3Sep',         struct('row', [1, 3, 5], 'col', [11, 13, 15], 'oldData', {{11, 13, 15; 31, 33, 35; 51, 53, 55}},                   'data', [1001, 1003, 1005; 3001, 3003, 3005; 5001, 5003, 5005],          'newData', {{1001, 1003, 1005; 3001, 3003, 3005; 5001, 5003, 5005}}),                   ...
            'Int2x3',            struct('row', 4:5,       'col', 11:13,        'oldData', {{41, 42, 43; 51, 52, 53}},                               'data', [4001, 4002, 4003; 5001, 5002, 5003],                            'newData', {{4001, 4002, 4003; 5001, 5002, 5003}}),                                     ...
            'Int3x2',            struct('row', 1:3,       'col', 14:15,        'oldData', {{14, 15; 24, 25; 34, 35}},                               'data', [1004, 1005; 2004, 2005; 3004, 3005],                            'newData', {{1004, 1005; 2004, 2005; 3004, 3005}}),                                     ...
            'Char1x1',           struct('row', 1,         'col', 6,            'oldData', {{'F1'}},                                                 'data', 'F001',                                                          'newData', {{'F001'}}),                                                                 ...
            'EmptyDouble1x1',    struct('row', 1,         'col', 16,           'oldData', {cell(1, 1)},                                             'data', 10.01,                                                           'newData', {{10.01}}),                                                                  ...
            'EmptyDouble2x2',    struct('row', 1:2,       'col', 16:17,        'oldData', {cell(2, 2)},                                             'data', [10.01, 10.02; 20.01, 20.02],                                    'newData', {{10.01, 10.02; 20.01, 20.02}}),                                             ...
            'EmptyDouble2x2Sep', struct('row', [1, 5],    'col', [16, 18],     'oldData', {cell(2, 2)},                                             'data', [10.01, 10.05; 50.01, 50.05],                                    'newData', {{10.01, 10.05; 50.01, 50.05}}),                                             ...
            'EmptyDouble3x3',    struct('row', 1:3,       'col', 16:18,        'oldData', {cell(3, 3)},                                             'data', [10.01, 10.02, 10.03; 20.01, 20.02, 20.03; 30.01, 30.02, 30.03], 'newData', {{10.01, 10.02, 10.03; 20.01, 20.02, 20.03; 30.01, 30.02, 30.03}}),          ...
            'EmptyDouble3x3Sep', struct('row', [1, 3, 5], 'col', [16, 18, 20], 'oldData', {cell(3, 3)},                                             'data', [10.01, 10.03, 10.05; 30.01, 30.03, 30.05; 50.01, 50.03, 50.05], 'newData', {{10.01, 10.03, 10.05; 30.01, 30.03, 30.05; 50.01, 50.03, 50.05}}),          ...
            'EmptyDouble2x3',    struct('row', 4:5,       'col', 16:18,        'oldData', {cell(2, 3)},                                             'data', [40.01, 40.02, 40.03; 50.01, 50.02, 50.03],                      'newData', {{40.01, 40.02, 40.03; 50.01, 50.02, 50.03}}),                               ...
            'EmptyDouble3x2',    struct('row', 1:3,       'col', 19:20,        'oldData', {cell(3, 2)},                                             'data', [10.04, 10.05; 20.04, 20.05; 30.04, 30.05],                      'newData', {{10.04, 10.05; 20.04, 20.05; 30.04, 30.05}}),                               ...
            'EmptyInt1x1',       struct('row', 1,         'col', 16,           'oldData', {cell(1, 1)},                                             'data', 1001,                                                            'newData', {{1001}}),                                                                   ...
            'EmptyInt2x2',       struct('row', 1:2,       'col', 16:17,        'oldData', {cell(2, 2)},                                             'data', [1001, 1002; 2001, 2002],                                        'newData', {{1001, 1002; 2001, 2002}}),                                                 ...
            'EmptyInt2x2Sep',    struct('row', [1, 5],    'col', [16, 18],     'oldData', {cell(2, 2)},                                             'data', [1001, 1005; 5001, 5005],                                        'newData', {{1001, 1005; 5001, 5005}}),                                                 ...
            'EmptyInt3x3',       struct('row', 1:3,       'col', 16:18,        'oldData', {cell(3, 3)},                                             'data', [1001, 1002, 1003; 2001, 2002, 2003; 3001, 3002, 3003],          'newData', {{1001, 1002, 1003; 2001, 2002, 2003; 3001, 3002, 3003}}),                   ...
            'EmptyInt3x3Sep',    struct('row', [1, 3, 5], 'col', [16, 18, 20], 'oldData', {cell(3, 3)},                                             'data', [1001, 1003, 1005; 3001, 3003, 3005; 5001, 5003, 5005],          'newData', {{1001, 1003, 1005; 3001, 3003, 3005; 5001, 5003, 5005}}),                   ...
            'EmptyInt2x3',       struct('row', 4:5,       'col', 16:18,        'oldData', {cell(2, 3)},                                             'data', [4001, 4002, 4003; 5001, 5002, 5003],                            'newData', {{4001, 4002, 4003; 5001, 5002, 5003}}),                                     ...
            'EmptyInt3x2',       struct('row', 1:3,       'col', 19:20,        'oldData', {cell(3, 2)},                                             'data', [1004, 1005; 2004, 2005; 3004, 3005],                            'newData', {{1004, 1005; 2004, 2005; 3004, 3005}}),                                     ...
            'EmptyChar1x1',      struct('row', 1,         'col', 6,            'oldData', {{'F1'}},                                                 'data', 'F001',                                                          'newData', {{'F001'}}),                                                                 ...
            'DoubleEmpty1x1',    struct('row', 1,         'col', 1,            'oldData', {{1.1}},                                                  'data', [],                                                              'newData', {cell(1, 1)}),                                                               ...
            'DoubleEmpty2x2',    struct('row', 1:2,       'col', 1:2,          'oldData', {{1.1, 1.2; 2.1, 2.2}},                                   'data', [],                                                              'newData', {cell(2, 2)}),                                                               ...
            'DoubleEmpty2x2Sep', struct('row', [1, 5],    'col', [1, 5],       'oldData', {{1.1, 1.5; 5.1, 5.5}},                                   'data', [],                                                              'newData', {cell(2, 2)}),                                                               ...
            'DoubleEmpty3x3',    struct('row', 1:3,       'col', 1:3,          'oldData', {{1.1, 1.2, 1.3; 2.1, 2.2, 2.3; 3.1, 3.2, 3.3}},          'data', [],                                                              'newData', {cell(3, 3)}),                                                               ...
            'DoubleEmpty3x3Sep', struct('row', [1, 3, 5], 'col', [1, 3, 5],    'oldData', {{1.1, 1.3, 1.5; 3.1, 3.3, 3.5; 5.1, 5.3, 5.5}},          'data', [],                                                              'newData', {cell(3, 3)}),                                                               ...
            'DoubleEmpty2x3',    struct('row', 4:5,       'col', 1:3,          'oldData', {{4.1, 4.2, 4.3; 5.1, 5.2, 5.3}},                         'data', [],                                                              'newData', {cell(2, 3)}),                                                               ...
            'DoubleEmpty3x2',    struct('row', 1:3,       'col', 4:5,          'oldData', {{1.4, 1.5; 2.4, 2.5; 3.4, 3.5}},                         'data', [],                                                              'newData', {cell(3, 2)}),                                                               ...
            'IntEmpty1x1',       struct('row', 1,         'col', 11,           'oldData', {{11}},                                                   'data', [],                                                              'newData', {cell(1, 1)}),                                                               ...
            'IntEmpty2x2',       struct('row', 1:2,       'col', 11:12,        'oldData', {{11, 12; 21, 22}},                                       'data', [],                                                              'newData', {cell(2, 2)}),                                                               ...
            'IntEmpty2x2Sep',    struct('row', [1, 3],    'col', [11, 13],     'oldData', {{11, 13; 31, 33}},                                       'data', [],                                                              'newData', {cell(2, 2)}),                                                               ...
            'IntEmpty3x3',       struct('row', 1:3,       'col', 11:13,        'oldData', {{11, 12, 13; 21, 22, 23; 31, 32, 33}},                   'data', [],                                                              'newData', {cell(3, 3)}),                                                               ...
            'IntEmpty3x3Sep',    struct('row', [1, 3, 5], 'col', [11, 13, 15], 'oldData', {{11, 13, 15; 31, 33, 35; 51, 53, 55}},                   'data', [],                                                              'newData', {cell(3, 3)}),                                                               ...
            'IntEmpty2x3',       struct('row', 4:5,       'col', 11:13,        'oldData', {{41, 42, 43; 51, 52, 53}},                               'data', [],                                                              'newData', {cell(2, 3)}),                                                               ...
            'IntEmpty3x2',       struct('row', 1:3,       'col', 14:15,        'oldData', {{14, 15; 24, 25; 34, 35}},                               'data', [],                                                              'newData', {cell(3, 2)}),                                                               ...
            'CharEmpty1x1',      struct('row', 1,         'col', 6,            'oldData', {{'F1'}},                                                 'data', [],                                                              'newData', {cell(1, 1)}),                                                               ...
            'CharEmpty2x2',      struct('row', 1:2,       'col', 6:7,          'oldData', {{'F1', 'G1'; 'F2', 'G2'}},                               'data', [],                                                              'newData', {cell(2, 2)}),                                                               ...
            'CharEmpty2x2Sep',   struct('row', [1, 3],    'col', [6, 8],       'oldData', {{'F1', 'H1'; 'F3', 'H3'}},                               'data', [],                                                              'newData', {cell(2, 2)}),                                                               ...
            'CharEmpty3x3',      struct('row', 1:3,       'col', 6:8,          'oldData', {{'F1', 'G1', 'H1'; 'F2', 'G2', 'H2'; 'F3', 'G3', 'H3'}}, 'data', [],                                                              'newData', {cell(3, 3)}),                                                               ...
            'CharEmpty3x3Sep',   struct('row', [1, 3, 5], 'col', [6, 8, 10],   'oldData', {{'F1', 'H1', 'J1'; 'F3', 'H3', 'J3'; 'F5', 'H5', 'J5'}}, 'data', [],                                                              'newData', {cell(3, 3)}),                                                               ...
            'CharEmpty2x3',      struct('row', 4:5,       'col', 6:8,          'oldData', {{'F4', 'G4', 'H4'; 'F5', 'G5', 'H5'}},                   'data', [],                                                              'newData', {cell(2, 3)}),                                                               ...
            'CharEmpty3x2',      struct('row', 1:3,       'col', 9:10,         'oldData', {{'I1', 'J1'; 'I2', 'J2'; 'I3', 'J3'}},                   'data', [],                                                              'newData', {cell(3, 2)})                                                                ...
        )
        cellSetOtherData = struct(                                                                                                                                                                                                                   ...
            'Double1x1',         struct('row', 1,         'col', 1,            'oldData', {{11.11}},                                                         'newData', {{10.01}}),                                                                  ...
            'Double2x2',         struct('row', 1:2,       'col', 1:2,          'oldData', {{11.11, 11.22; 22.11, 22.22}},                                    'newData', {{10.01, 10.02; 20.01, 20.20}}),                                             ...
            'Double2x2Sep',      struct('row', [1, 5],    'col', [1, 5],       'oldData', {{11.11, 11.55; 55.11, 55.55}},                                    'newData', {{10.01, 10.05; 50.01, 50.50}}),                                             ...
            'Double3x3',         struct('row', 1:3,       'col', 1:3,          'oldData', {{11.11, 11.22, 11.33; 22.11, 22.22, 22.33; 33.11, 33.22, 33.33}}, 'newData', {{10.01, 10.02, 10.03; 20.10, 20.02, 20.30; 30.01, 30.02, 30.03}}),          ...
            'Double3x3Sep',      struct('row', [1, 3, 5], 'col', [1, 3, 5],    'oldData', {{11.11, 11.33, 11.55; 33.11, 33.33, 33.55; 55.11, 55.33, 55.55}}, 'newData', {{10.01, 10.03, 10.05; 30.10, 30.03, 30.50; 50.01, 50.03, 50.05}}),          ...
            'Double2x3',         struct('row', 4:5,       'col', 1:3,          'oldData', {{44.11, 44.22, 44.33; 55.11, 55.22, 55.33}},                      'newData', {{40.01, 40.02, 40.03; 50.10, 50.02, 50.30}}),                               ...
            'Double3x2',         struct('row', 1:3,       'col', 4:5,          'oldData', {{11.44, 11.55; 22.44, 22.55; 33.44, 33.55}},                      'newData', {{10.04, 10.05; 20.04, 20.50; 30.04, 30.50}}),                               ...
            'Int1x1',            struct('row', 1,         'col', 11,           'oldData', {{1111}},                                                          'newData', {{1001}}),                                                                   ...
            'Int2x2',            struct('row', 1:2,       'col', 11:12,        'oldData', {{1111, 1122; 2211, 2222}},                                        'newData', {{1001, 1002; 2001, 2002}}),                                                 ...
            'Int2x2Sep',         struct('row', [1, 3],    'col', [11, 13],     'oldData', {{1111, 1133; 3311, 3333}},                                        'newData', {{1001, 1005; 5001, 5005}}),                                                 ...
            'Int3x3',            struct('row', 1:3,       'col', 11:13,        'oldData', {{1111, 1122, 1133; 2211, 2222, 2233; 3311, 3322, 3333}},          'newData', {{1001, 1002, 1003; 2001, 2002, 2003; 3001, 3002, 3003}}),                   ...
            'Int3x3Sep',         struct('row', [1, 3, 5], 'col', [11, 13, 15], 'oldData', {{1111, 1133, 1155; 3311, 3333, 3355; 5511, 5533, 5555}},          'newData', {{1001, 1003, 1005; 3001, 3003, 3005; 5001, 5003, 5005}}),                   ...
            'Int2x3',            struct('row', 4:5,       'col', 11:13,        'oldData', {{4411, 4422, 4433; 5511, 5522, 5533}},                            'newData', {{4001, 4002, 4003; 5001, 5002, 5003}}),                                     ...
            'Int3x2',            struct('row', 1:3,       'col', 14:15,        'oldData', {{1144, 1155; 2244, 2255; 3344, 3355}},                            'newData', {{1004, 1005; 2004, 2005; 3004, 3005}}),                                     ...
            'Char1x1',           struct('row', 1,         'col', 6,            'oldData', {{'f1'}},                                                          'newData', {{'F001'}}),                                                                 ...
            'Char2x2',           struct('row', 1:2,       'col', 6:7,          'oldData', {{'f1', 'g1'; 'f2', 'g2'}},                                        'newData', {{'F001', 'G001'; 'F003', 'G003'}}),                                         ...
            'Char2x2Sep',        struct('row', [1, 3],    'col', [6, 8],       'oldData', {{'f1', 'h1'; 'f3', 'h3'}},                                        'newData', {{'F001', 'H001'; 'F003', 'H003'}}),                                         ...
            'Char3x3',           struct('row', 1:3,       'col', 6:8,          'oldData', {{'f1', 'g1', 'h1'; 'f2', 'g2', 'h2'; 'f3', 'g3', 'h3'}},          'newData', {{'F001', 'G001', 'H001'; 'F002', 'G002', 'H002'; 'F003', 'G003', 'H003'}}), ...
            'Char3x3Sep',        struct('row', [1, 3, 5], 'col', [6, 8, 10],   'oldData', {{'f1', 'h1', 'j1'; 'f3', 'h3', 'j3'; 'f5', 'h5', 'j5'}},          'newData', {{'F001', 'H001', 'J001'; 'F003', 'H003', 'J003'; 'F005', 'H005', 'J005'}}), ...
            'Char2x3',           struct('row', 4:5,       'col', 6:8,          'oldData', {{'f4', 'g4', 'h4'; 'f5', 'g5', 'h5'}},                            'newData', {{'F004', 'G004', 'H004'; 'F005', 'G005', 'H005'}}),                         ...
            'Char3x2',           struct('row', 1:3,       'col', 9:10,         'oldData', {{'i1', 'j1'; 'i2', 'j2'; 'i3', 'j3'}},                            'newData', {{'I001', 'J001'; 'I002', 'J002'; 'I003', 'J003'}}),                         ...
            'EmptyDouble1x1',    struct('row', 1,         'col', 16,           'oldData', {cell(1, 1)},                                                      'newData', {{10.01}}),                                                                  ...
            'EmptyDouble2x2',    struct('row', 1:2,       'col', 16:17,        'oldData', {cell(2, 2)},                                                      'newData', {{10.01, 10.02; 20.01, 20.02}}),                                             ...
            'EmptyDouble2x2Sep', struct('row', [1, 5],    'col', [16, 18],     'oldData', {cell(2, 2)},                                                      'newData', {{10.01, 10.05; 50.01, 50.05}}),                                             ...
            'EmptyDouble3x3',    struct('row', 1:3,       'col', 16:18,        'oldData', {cell(3, 3)},                                                      'newData', {{10.01, 10.02, 10.03; 20.01, 20.02, 20.03; 30.01, 30.02, 30.03}}),          ...
            'EmptyDouble3x3Sep', struct('row', [1, 3, 5], 'col', [16, 18, 20], 'oldData', {cell(3, 3)},                                                      'newData', {{10.01, 10.03, 10.05; 30.01, 30.03, 30.05; 50.01, 50.03, 50.05}}),          ...
            'EmptyDouble2x3',    struct('row', 4:5,       'col', 16:18,        'oldData', {cell(2, 3)},                                                      'newData', {{40.01, 40.02, 40.03; 50.01, 50.02, 50.03}}),                               ...
            'EmptyDouble3x2',    struct('row', 1:3,       'col', 19:20,        'oldData', {cell(3, 2)},                                                      'newData', {{10.04, 10.05; 20.04, 20.05; 30.04, 30.05}}),                               ...
            'EmptyInt1x1',       struct('row', 1,         'col', 16,           'oldData', {cell(1, 1)},                                                      'newData', {{1001}}),                                                                   ...
            'EmptyInt2x2',       struct('row', 1:2,       'col', 16:17,        'oldData', {cell(2, 2)},                                                      'newData', {{1001, 1002; 2001, 2002}}),                                                 ...
            'EmptyInt2x2Sep',    struct('row', [1, 5],    'col', [16, 18],     'oldData', {cell(2, 2)},                                                      'newData', {{1001, 1005; 5001, 5005}}),                                                 ...
            'EmptyInt3x3',       struct('row', 1:3,       'col', 16:18,        'oldData', {cell(3, 3)},                                                      'newData', {{1001, 1002, 1003; 2001, 2002, 2003; 3001, 3002, 3003}}),                   ...
            'EmptyInt3x3Sep',    struct('row', [1, 3, 5], 'col', [16, 18, 20], 'oldData', {cell(3, 3)},                                                      'newData', {{1001, 1003, 1005; 3001, 3003, 3005; 5001, 5003, 5005}}),                   ...
            'EmptyInt2x3',       struct('row', 4:5,       'col', 16:18,        'oldData', {cell(2, 3)},                                                      'newData', {{4001, 4002, 4003; 5001, 5002, 5003}}),                                     ...
            'EmptyInt3x2',       struct('row', 1:3,       'col', 19:20,        'oldData', {cell(3, 2)},                                                      'newData', {{1004, 1005; 2004, 2005; 3004, 3005}}),                                     ...
            'EmptyChar1x1',      struct('row', 1,         'col', 6,            'oldData', {{'f1'}},                                                          'newData', {{'F001'}}),                                                                 ...
            'EmptyChar2x2',      struct('row', 1:2,       'col', 6:7,          'oldData', {{'f1', 'g1'; 'f2', 'g2'}},                                        'newData', {{'F001', 'G001'; 'F003', 'G003'}}),                                         ...
            'EmptyChar2x2Sep',   struct('row', [1, 3],    'col', [6, 8],       'oldData', {{'f1', 'h1'; 'f3', 'h3'}},                                        'newData', {{'F001', 'H001'; 'F003', 'H003'}}),                                         ...
            'EmptyChar3x3',      struct('row', 1:3,       'col', 6:8,          'oldData', {{'f1', 'g1', 'h1'; 'f2', 'g2', 'h2'; 'f3', 'g3', 'h3'}},          'newData', {{'F001', 'G001', 'H001'; 'F002', 'G002', 'H002'; 'F003', 'G003', 'H003'}}), ...
            'EmptyChar3x3Sep',   struct('row', [1, 3, 5], 'col', [6, 8, 10],   'oldData', {{'f1', 'h1', 'j1'; 'f3', 'h3', 'j3'; 'f5', 'h5', 'j5'}},          'newData', {{'F001', 'H001', 'J001'; 'F003', 'H003', 'J003'; 'F005', 'H005', 'J005'}}), ...
            'EmptyChar2x3',      struct('row', 4:5,       'col', 6:8,          'oldData', {{'f4', 'g4', 'h4'; 'f5', 'g5', 'h5'}},                            'newData', {{'F004', 'G004', 'H004'; 'F005', 'G005', 'H005'}}),                         ...
            'EmptyChar3x2',      struct('row', 1:3,       'col', 9:10,         'oldData', {{'i1', 'j1'; 'i2', 'j2'; 'i3', 'j3'}},                            'newData', {{'I001', 'J001'; 'I002', 'J002'; 'I003', 'J003'}}),                         ...
            'Mixed1x2',          struct('row', 1,         'col', 5:6,          'oldData', {{11.55, 'f1'}},                                                   'newData', {{10.05, 'F001'}}),                                                          ...
            'Mixed1x2Sep',       struct('row', 1,         'col', [4, 7],       'oldData', {{11.44, 'g1'}},                                                   'newData', {{10.04, 'G001'}}),                                                          ...
            'DoubleEmpty1x1',    struct('row', 1,         'col', 1,            'oldData', {{11.11}},                                                         'newData', {cell(1, 1)}),                                                               ...
            'DoubleEmpty2x2',    struct('row', 1:2,       'col', 1:2,          'oldData', {{11.11, 11.22; 22.11, 22.22}},                                    'newData', {cell(2, 2)}),                                                               ...
            'DoubleEmpty2x2Sep', struct('row', [1, 5],    'col', [1, 5],       'oldData', {{11.11, 11.55; 55.11, 55.55}},                                    'newData', {cell(2, 2)}),                                                               ...
            'DoubleEmpty3x3',    struct('row', 1:3,       'col', 1:3,          'oldData', {{11.11, 11.22, 11.33; 22.11, 22.22, 22.33; 33.11, 33.22, 33.33}}, 'newData', {cell(3, 3)}),                                                               ...
            'DoubleEmpty3x3Sep', struct('row', [1, 3, 5], 'col', [1, 3, 5],    'oldData', {{11.11, 11.33, 11.55; 33.11, 33.33, 33.55; 55.11, 55.33, 55.55}}, 'newData', {cell(3, 3)}),                                                               ...
            'DoubleEmpty2x3',    struct('row', 4:5,       'col', 1:3,          'oldData', {{44.11, 44.22, 44.33; 55.11, 55.22, 55.33}},                      'newData', {cell(2, 3)}),                                                               ...
            'DoubleEmpty3x2',    struct('row', 1:3,       'col', 4:5,          'oldData', {{11.44, 11.55; 22.44, 22.55; 33.44, 33.55}},                      'newData', {cell(3, 2)}),                                                               ...
            'IntEmpty1x1',       struct('row', 1,         'col', 11,           'oldData', {{1111}},                                                          'newData', {cell(1, 1)}),                                                               ...
            'IntEmpty2x2',       struct('row', 1:2,       'col', 11:12,        'oldData', {{1111, 1122; 2211, 2222}},                                        'newData', {cell(2, 2)}),                                                               ...
            'IntEmpty2x2Sep',    struct('row', [1, 3],    'col', [11, 13],     'oldData', {{1111, 1133; 3311, 3333}},                                        'newData', {cell(2, 2)}),                                                               ...
            'IntEmpty3x3',       struct('row', 1:3,       'col', 11:13,        'oldData', {{1111, 1122, 1133; 2211, 2222, 2233; 3311, 3322, 3333}},          'newData', {cell(3, 3)}),                                                               ...
            'IntEmpty3x3Sep',    struct('row', [1, 3, 5], 'col', [11, 13, 15], 'oldData', {{1111, 1133, 1155; 3311, 3333, 3355; 5511, 5533, 5555}},          'newData', {cell(3, 3)}),                                                               ...
            'IntEmpty2x3',       struct('row', 4:5,       'col', 11:13,        'oldData', {{4411, 4422, 4433; 5511, 5522, 5533}},                            'newData', {cell(2, 3)}),                                                               ...
            'IntEmpty3x2',       struct('row', 1:3,       'col', 14:15,        'oldData', {{1144, 1155; 2244, 2255; 3344, 3355}},                            'newData', {cell(3, 2)}),                                                               ...
            'CharEmpty1x1',      struct('row', 1,         'col', 6,            'oldData', {{'f1'}},                                                          'newData', {cell(1, 1)}),                                                               ...
            'CharEmpty2x2',      struct('row', 1:2,       'col', 6:7,          'oldData', {{'f1', 'g1'; 'f2', 'g2'}},                                        'newData', {cell(2, 2)}),                                                               ...
            'CharEmpty2x2Sep',   struct('row', [1, 3],    'col', [6, 8],       'oldData', {{'f1', 'h1'; 'f3', 'h3'}},                                        'newData', {cell(2, 2)}),                                                               ...
            'CharEmpty3x3',      struct('row', 1:3,       'col', 6:8,          'oldData', {{'f1', 'g1', 'h1'; 'f2', 'g2', 'h2'; 'f3', 'g3', 'h3'}},          'newData', {cell(3, 3)}),                                                               ...
            'CharEmpty3x3Sep',   struct('row', [1, 3, 5], 'col', [6, 8, 10],   'oldData', {{'f1', 'h1', 'j1'; 'f3', 'h3', 'j3'; 'f5', 'h5', 'j5'}},          'newData', {cell(3, 3)}),                                                               ...
            'CharEmpty2x3',      struct('row', 4:5,       'col', 6:8,          'oldData', {{'f4', 'g4', 'h4'; 'f5', 'g5', 'h5'}},                            'newData', {cell(2, 3)}),                                                               ...
            'CharEmpty3x2',      struct('row', 1:3,       'col', 9:10,         'oldData', {{'i1', 'j1'; 'i2', 'j2'; 'i3', 'j3'}},                            'newData', {cell(3, 2)})                                                                ...
        )
        matrixSetOtherData = struct(                                                                                                                                                                                                                                                                                          ...
            'Double1x1',         struct('row', 1,         'col', 1,            'oldData', {{11.11}},                                                         'data', 10.01,                                                           'newData', {{10.01}}),                                                                  ...
            'Double2x2',         struct('row', 1:2,       'col', 1:2,          'oldData', {{11.11, 11.22; 22.11, 22.22}},                                    'data', [10.01, 10.02; 20.01, 20.20],                                    'newData', {{10.01, 10.02; 20.01, 20.20}}),                                             ...
            'Double2x2Sep',      struct('row', [1, 5],    'col', [1, 5],       'oldData', {{11.11, 11.55; 55.11, 55.55}},                                    'data', [10.01, 10.05; 50.01, 50.50],                                    'newData', {{10.01, 10.05; 50.01, 50.50}}),                                             ...
            'Double3x3',         struct('row', 1:3,       'col', 1:3,          'oldData', {{11.11, 11.22, 11.33; 22.11, 22.22, 22.33; 33.11, 33.22, 33.33}}, 'data', [10.01, 10.02, 10.03; 20.10, 20.02, 20.30; 30.01, 30.02, 30.03], 'newData', {{10.01, 10.02, 10.03; 20.10, 20.02, 20.30; 30.01, 30.02, 30.03}}),          ...
            'Double3x3Sep',      struct('row', [1, 3, 5], 'col', [1, 3, 5],    'oldData', {{11.11, 11.33, 11.55; 33.11, 33.33, 33.55; 55.11, 55.33, 55.55}}, 'data', [10.01, 10.03, 10.05; 30.10, 30.03, 30.50; 50.01, 50.03, 50.05], 'newData', {{10.01, 10.03, 10.05; 30.10, 30.03, 30.50; 50.01, 50.03, 50.05}}),          ...
            'Double2x3',         struct('row', 4:5,       'col', 1:3,          'oldData', {{44.11, 44.22, 44.33; 55.11, 55.22, 55.33}},                      'data', [40.01, 40.02, 40.03; 50.10, 50.02, 50.30],                      'newData', {{40.01, 40.02, 40.03; 50.10, 50.02, 50.30}}),                               ...
            'Double3x2',         struct('row', 1:3,       'col', 4:5,          'oldData', {{11.44, 11.55; 22.44, 22.55; 33.44, 33.55}},                      'data', [10.04, 10.05; 20.04, 20.50; 30.04, 30.50],                      'newData', {{10.04, 10.05; 20.04, 20.50; 30.04, 30.50}}),                               ...
            'Int1x1',            struct('row', 1,         'col', 11,           'oldData', {{1111}},                                                          'data', 1001,                                                            'newData', {{1001}}),                                                                   ...
            'Int2x2',            struct('row', 1:2,       'col', 11:12,        'oldData', {{1111, 1122; 2211, 2222}},                                        'data', [1001, 1002; 2001, 2002],                                        'newData', {{1001, 1002; 2001, 2002}}),                                                 ...
            'Int2x2Sep',         struct('row', [1, 3],    'col', [11, 13],     'oldData', {{1111, 1133; 3311, 3333}},                                        'data', [1001, 1005; 5001, 5005],                                        'newData', {{1001, 1005; 5001, 5005}}),                                                 ...
            'Int3x3',            struct('row', 1:3,       'col', 11:13,        'oldData', {{1111, 1122, 1133; 2211, 2222, 2233; 3311, 3322, 3333}},          'data', [1001, 1002, 1003; 2001, 2002, 2003; 3001, 3002, 3003],          'newData', {{1001, 1002, 1003; 2001, 2002, 2003; 3001, 3002, 3003}}),                   ...
            'Int3x3Sep',         struct('row', [1, 3, 5], 'col', [11, 13, 15], 'oldData', {{1111, 1133, 1155; 3311, 3333, 3355; 5511, 5533, 5555}},          'data', [1001, 1003, 1005; 3001, 3003, 3005; 5001, 5003, 5005],          'newData', {{1001, 1003, 1005; 3001, 3003, 3005; 5001, 5003, 5005}}),                   ...
            'Int2x3',            struct('row', 4:5,       'col', 11:13,        'oldData', {{4411, 4422, 4433; 5511, 5522, 5533}},                            'data', [4001, 4002, 4003; 5001, 5002, 5003],                            'newData', {{4001, 4002, 4003; 5001, 5002, 5003}}),                                     ...
            'Int3x2',            struct('row', 1:3,       'col', 14:15,        'oldData', {{1144, 1155; 2244, 2255; 3344, 3355}},                            'data', [1004, 1005; 2004, 2005; 3004, 3005],                            'newData', {{1004, 1005; 2004, 2005; 3004, 3005}}),                                     ...
            'Char1x1',           struct('row', 1,         'col', 6,            'oldData', {{'f1'}},                                                          'data', 'F001',                                                          'newData', {{'F001'}}),                                                                 ...
            'EmptyDouble1x1',    struct('row', 1,         'col', 16,           'oldData', {cell(1, 1)},                                                      'data', 10.01,                                                           'newData', {{10.01}}),                                                                  ...
            'EmptyDouble2x2',    struct('row', 1:2,       'col', 16:17,        'oldData', {cell(2, 2)},                                                      'data', [10.01, 10.02; 20.01, 20.02],                                    'newData', {{10.01, 10.02; 20.01, 20.02}}),                                             ...
            'EmptyDouble2x2Sep', struct('row', [1, 5],    'col', [16, 18],     'oldData', {cell(2, 2)},                                                      'data', [10.01, 10.05; 50.01, 50.05],                                    'newData', {{10.01, 10.05; 50.01, 50.05}}),                                             ...
            'EmptyDouble3x3',    struct('row', 1:3,       'col', 16:18,        'oldData', {cell(3, 3)},                                                      'data', [10.01, 10.02, 10.03; 20.01, 20.02, 20.03; 30.01, 30.02, 30.03], 'newData', {{10.01, 10.02, 10.03; 20.01, 20.02, 20.03; 30.01, 30.02, 30.03}}),          ...
            'EmptyDouble3x3Sep', struct('row', [1, 3, 5], 'col', [16, 18, 20], 'oldData', {cell(3, 3)},                                                      'data', [10.01, 10.03, 10.05; 30.01, 30.03, 30.05; 50.01, 50.03, 50.05], 'newData', {{10.01, 10.03, 10.05; 30.01, 30.03, 30.05; 50.01, 50.03, 50.05}}),          ...
            'EmptyDouble2x3',    struct('row', 4:5,       'col', 16:18,        'oldData', {cell(2, 3)},                                                      'data', [40.01, 40.02, 40.03; 50.01, 50.02, 50.03],                      'newData', {{40.01, 40.02, 40.03; 50.01, 50.02, 50.03}}),                               ...
            'EmptyDouble3x2',    struct('row', 1:3,       'col', 19:20,        'oldData', {cell(3, 2)},                                                      'data', [10.04, 10.05; 20.04, 20.05; 30.04, 30.05],                      'newData', {{10.04, 10.05; 20.04, 20.05; 30.04, 30.05}}),                               ...
            'EmptyInt1x1',       struct('row', 1,         'col', 16,           'oldData', {cell(1, 1)},                                                      'data', 1001,                                                            'newData', {{1001}}),                                                                   ...
            'EmptyInt2x2',       struct('row', 1:2,       'col', 16:17,        'oldData', {cell(2, 2)},                                                      'data', [1001, 1002; 2001, 2002],                                        'newData', {{1001, 1002; 2001, 2002}}),                                                 ...
            'EmptyInt2x2Sep',    struct('row', [1, 5],    'col', [16, 18],     'oldData', {cell(2, 2)},                                                      'data', [1001, 1005; 5001, 5005],                                        'newData', {{1001, 1005; 5001, 5005}}),                                                 ...
            'EmptyInt3x3',       struct('row', 1:3,       'col', 16:18,        'oldData', {cell(3, 3)},                                                      'data', [1001, 1002, 1003; 2001, 2002, 2003; 3001, 3002, 3003],          'newData', {{1001, 1002, 1003; 2001, 2002, 2003; 3001, 3002, 3003}}),                   ...
            'EmptyInt3x3Sep',    struct('row', [1, 3, 5], 'col', [16, 18, 20], 'oldData', {cell(3, 3)},                                                      'data', [1001, 1003, 1005; 3001, 3003, 3005; 5001, 5003, 5005],          'newData', {{1001, 1003, 1005; 3001, 3003, 3005; 5001, 5003, 5005}}),                   ...
            'EmptyInt2x3',       struct('row', 4:5,       'col', 16:18,        'oldData', {cell(2, 3)},                                                      'data', [4001, 4002, 4003; 5001, 5002, 5003],                            'newData', {{4001, 4002, 4003; 5001, 5002, 5003}}),                                     ...
            'EmptyInt3x2',       struct('row', 1:3,       'col', 19:20,        'oldData', {cell(3, 2)},                                                      'data', [1004, 1005; 2004, 2005; 3004, 3005],                            'newData', {{1004, 1005; 2004, 2005; 3004, 3005}}),                                     ...
            'EmptyChar1x1',      struct('row', 1,         'col', 6,            'oldData', {{'f1'}},                                                          'data', 'F001',                                                          'newData', {{'F001'}}),                                                                 ...
            'DoubleEmpty1x1',    struct('row', 1,         'col', 1,            'oldData', {{11.11}},                                                         'data', [],                                                              'newData', {cell(1, 1)}),                                                               ...
            'DoubleEmpty2x2',    struct('row', 1:2,       'col', 1:2,          'oldData', {{11.11, 11.22; 22.11, 22.22}},                                    'data', [],                                                              'newData', {cell(2, 2)}),                                                               ...
            'DoubleEmpty2x2Sep', struct('row', [1, 5],    'col', [1, 5],       'oldData', {{11.11, 11.55; 55.11, 55.55}},                                    'data', [],                                                              'newData', {cell(2, 2)}),                                                               ...
            'DoubleEmpty3x3',    struct('row', 1:3,       'col', 1:3,          'oldData', {{11.11, 11.22, 11.33; 22.11, 22.22, 22.33; 33.11, 33.22, 33.33}}, 'data', [],                                                              'newData', {cell(3, 3)}),                                                               ...
            'DoubleEmpty3x3Sep', struct('row', [1, 3, 5], 'col', [1, 3, 5],    'oldData', {{11.11, 11.33, 11.55; 33.11, 33.33, 33.55; 55.11, 55.33, 55.55}}, 'data', [],                                                              'newData', {cell(3, 3)}),                                                               ...
            'DoubleEmpty2x3',    struct('row', 4:5,       'col', 1:3,          'oldData', {{44.11, 44.22, 44.33; 55.11, 55.22, 55.33}},                      'data', [],                                                              'newData', {cell(2, 3)}),                                                               ...
            'DoubleEmpty3x2',    struct('row', 1:3,       'col', 4:5,          'oldData', {{11.44, 11.55; 22.44, 22.55; 33.44, 33.55}},                      'data', [],                                                              'newData', {cell(3, 2)}),                                                               ...
            'IntEmpty1x1',       struct('row', 1,         'col', 11,           'oldData', {{1111}},                                                          'data', [],                                                              'newData', {cell(1, 1)}),                                                               ...
            'IntEmpty2x2',       struct('row', 1:2,       'col', 11:12,        'oldData', {{1111, 1122; 2211, 2222}},                                        'data', [],                                                              'newData', {cell(2, 2)}),                                                               ...
            'IntEmpty2x2Sep',    struct('row', [1, 3],    'col', [11, 13],     'oldData', {{1111, 1133; 3311, 3333}},                                        'data', [],                                                              'newData', {cell(2, 2)}),                                                               ...
            'IntEmpty3x3',       struct('row', 1:3,       'col', 11:13,        'oldData', {{1111, 1122, 1133; 2211, 2222, 2233; 3311, 3322, 3333}},          'data', [],                                                              'newData', {cell(3, 3)}),                                                               ...
            'IntEmpty3x3Sep',    struct('row', [1, 3, 5], 'col', [11, 13, 15], 'oldData', {{1111, 1133, 1155; 3311, 3333, 3355; 5511, 5533, 5555}},          'data', [],                                                              'newData', {cell(3, 3)}),                                                               ...
            'IntEmpty2x3',       struct('row', 4:5,       'col', 11:13,        'oldData', {{4411, 4422, 4433; 5511, 5522, 5533}},                            'data', [],                                                              'newData', {cell(2, 3)}),                                                               ...
            'IntEmpty3x2',       struct('row', 1:3,       'col', 14:15,        'oldData', {{1144, 1155; 2244, 2255; 3344, 3355}},                            'data', [],                                                              'newData', {cell(3, 2)}),                                                               ...
            'CharEmpty1x1',      struct('row', 1,         'col', 6,            'oldData', {{'f1'}},                                                          'data', [],                                                              'newData', {cell(1, 1)}),                                                               ...
            'CharEmpty2x2',      struct('row', 1:2,       'col', 6:7,          'oldData', {{'f1', 'g1'; 'f2', 'g2'}},                                        'data', [],                                                              'newData', {cell(2, 2)}),                                                               ...
            'CharEmpty2x2Sep',   struct('row', [1, 3],    'col', [6, 8],       'oldData', {{'f1', 'h1'; 'f3', 'h3'}},                                        'data', [],                                                              'newData', {cell(2, 2)}),                                                               ...
            'CharEmpty3x3',      struct('row', 1:3,       'col', 6:8,          'oldData', {{'f1', 'g1', 'h1'; 'f2', 'g2', 'h2'; 'f3', 'g3', 'h3'}},          'data', [],                                                              'newData', {cell(3, 3)}),                                                               ...
            'CharEmpty3x3Sep',   struct('row', [1, 3, 5], 'col', [6, 8, 10],   'oldData', {{'f1', 'h1', 'j1'; 'f3', 'h3', 'j3'; 'f5', 'h5', 'j5'}},          'data', [],                                                              'newData', {cell(3, 3)}),                                                               ...
            'CharEmpty2x3',      struct('row', 4:5,       'col', 6:8,          'oldData', {{'f4', 'g4', 'h4'; 'f5', 'g5', 'h5'}},                            'data', [],                                                              'newData', {cell(2, 3)}),                                                               ...
            'CharEmpty3x2',      struct('row', 1:3,       'col', 9:10,         'oldData', {{'i1', 'j1'; 'i2', 'j2'; 'i3', 'j3'}},                            'data', [],                                                              'newData', {cell(3, 2)})                                                                ...
        )
    end

    methods(TestParameterDefinition,Static)
        function sensitivityLabelName = initSensitivityLabelNames
            sensitivityLabelName = cell(1, 1);
            anyErr = [];
            basePath = fileparts(fileparts(mfilename('fullpath')));
            addpath(basePath);
            try
                sensitivities = organizationSensitivities();
            catch anyErr
                if strcmp(anyErr.identifier, 'MATLAB:UndefinedFunction')
                    return;
                end
            end
            rmpath(basePath);
            if ~isempty(anyErr)
                rethrow(anyErr);
            end
            for field = transpose(fieldnames(sensitivities))
                if ~sensitivities.(field{:}).Test
                    sensitivities = rmfield(sensitivities, field{:});
                end
            end
            sensitivityLabelName = transpose(fieldnames(sensitivities));
        end
    end

    properties(Access=private)
        mBasePath
        mDataFileName
        mDataFilePath
        mNewFileName
        mNewFilePath
        mExcelTasks
    end

    methods
        function self = TestXLSFile()
            self.mDataFileName = 'dataTestXLSFile.xlsx';
            self.mDataFilePath = fullfile(fileparts(mfilename('fullpath')), self.mDataFileName);
            self.mNewFileName = 'dataTestXLSFileNew.xlsx';
            self.mNewFilePath = fullfile(fileparts(mfilename('fullpath')), self.mNewFileName);
        end
    end

    methods(TestClassSetup)
        function setupPath(self)
            self.mBasePath = fileparts(fileparts(mfilename('fullpath')));
            addpath(self.mBasePath);
            rehash;
        end
    end

    methods(TestMethodSetup)
        function saveExcel(self)
            self.mExcelTasks = taskList(false, 'excel.exe');
        end
    end

    methods(Test)
        % Sensitivity label names
        function testGetSensitivityLabelNames(self)
            labelNames = XLSFile.getSensitivityLabelNames();
            self.verifyTrue(iscell(labelNames));
            self.verifyEqual(size(labelNames, 2), 1);
        end
        % Index conversion test
        function testToXLSline(self, toXLSLineData)
            self.verifyEqual(XLSFile.toXLSLine(toXLSLineData.matlab), toXLSLineData.excel)
        end
        function testToXLSColumn(self, toXLSColumnData)
            self.verifyEqual(XLSFile.toXLSColumn(toXLSColumnData.matlab), toXLSColumnData.excel)
        end
        % Constructor tests
        function testAbsoluteConstructorOpen(self)
            self.assumeEqual(exist(self.mDataFilePath, 'file'), 2);
            xlsFile = XLSFile(self.mDataFilePath);
            self.verifyTrue(xlsFile.IsOpen);
            self.verifyEqual(xlsFile.Path, self.mDataFilePath);
        end
        function testRelativeConstructorOpen(self)
            oldPwd = pwd;
            self.addTeardown(@cd, oldPwd);
            cd(fileparts(mfilename('fullpath')));

            self.assumeEqual(exist(self.mDataFileName, 'file'), 2);
            xlsFile = XLSFile(self.mDataFileName);
            self.verifyTrue(xlsFile.IsOpen);
            self.verifyEqual(xlsFile.Path, self.mDataFilePath);
        end
        function testAbsoluteConstructorCreate(self, sensitivityLabelName)
            self.addTeardown(@delete, self.mNewFilePath);

            self.assumeEqual(exist(self.mNewFilePath, 'file'), 0);
            if ~isempty(sensitivityLabelName)
                xlsFile = XLSFile(self.mNewFilePath, true, sensitivityLabelName);
            else
                xlsFile = XLSFile(self.mNewFilePath);
            end
            self.verifyTrue(xlsFile.IsOpen);
            self.verifyEqual(xlsFile.Path, self.mNewFilePath);
            self.verifyEqual(exist(self.mNewFilePath, 'file'), 2);
        end
        function testRelativeConstructorCreate(self, sensitivityLabelName)
            self.addTeardown(@delete, self.mNewFilePath);

            oldPwd = pwd;
            self.addTeardown(@cd, oldPwd);
            cd(fileparts(mfilename('fullpath')));

            self.assumeEqual(exist(self.mNewFileName, 'file'), 0);
            if ~isempty(sensitivityLabelName)
                xlsFile = XLSFile(self.mNewFileName, true, sensitivityLabelName);
            else
                xlsFile = XLSFile(self.mNewFileName);
            end
            self.verifyTrue(xlsFile.IsOpen);
            self.verifyEqual(xlsFile.Path, self.mNewFilePath);
            self.verifyEqual(exist(self.mNewFileName, 'file'), 2);
        end
        function testAbsoluteConstructorNoCreate(self)
            self.assumeEqual(exist(self.mNewFilePath, 'file'), 0);
            self.verifyError(@() XLSFile(self.mNewFilePath, false), 'XLSFile:FileDoesNotExist');
            self.verifyEqual(exist(self.mNewFilePath, 'file'), 0);
        end
        function testRelativeConstructorNoCreate(self)
            oldPwd = pwd;
            self.addTeardown(@cd, oldPwd);
            cd(fileparts(mfilename('fullpath')));

            self.assumeEqual(exist(self.mNewFileName, 'file'), 0);
            self.verifyError(@() XLSFile(self.mNewFileName, false), 'XLSFile:FileDoesNotExist');
            self.verifyEqual(exist(self.mNewFileName, 'file'), 0);
        end
        % Open test
        function testAbsoluteOpen(self)
            self.addTeardown(@delete, self.mNewFilePath);
            copyfile(self.mDataFilePath, self.mNewFilePath);

            self.assumeEqual(exist(self.mDataFilePath, 'file'), 2);
            self.assumeEqual(exist(self.mNewFilePath, 'file'), 2);

            xlsFile = XLSFile();
            self.verifyFalse(xlsFile.IsOpen);
            self.verifyEmpty(xlsFile.Path);

            xlsFile.open(self.mDataFilePath);
            self.verifyTrue(xlsFile.IsOpen);
            self.verifyEqual(xlsFile.Path, self.mDataFilePath);

            xlsFile.open(self.mNewFilePath);
            self.verifyTrue(xlsFile.IsOpen);
            self.verifyEqual(xlsFile.Path, self.mNewFilePath);

            xlsFile.close();
            self.verifyFalse(xlsFile.IsOpen);
            self.verifyEmpty(xlsFile.Path);
        end
        function testRelativeOpen(self)
            self.addTeardown(@delete, self.mNewFilePath);
            copyfile(self.mDataFilePath, self.mNewFilePath);

            oldPwd = pwd;
            self.addTeardown(@cd, oldPwd);
            cd(fileparts(mfilename('fullpath')));

            self.assumeEqual(exist(self.mDataFileName, 'file'), 2);
            self.assumeEqual(exist(self.mNewFileName, 'file'), 2);

            xlsFile = XLSFile();
            self.verifyFalse(xlsFile.IsOpen);
            self.verifyEmpty(xlsFile.Path);

            xlsFile.open(self.mDataFileName);
            self.verifyTrue(xlsFile.IsOpen);
            self.verifyEqual(xlsFile.Path, self.mDataFilePath);

            xlsFile.open(self.mNewFileName);
            self.verifyTrue(xlsFile.IsOpen);
            self.verifyEqual(xlsFile.Path, self.mNewFilePath);

            xlsFile.close();
            self.verifyFalse(xlsFile.IsOpen);
            self.verifyEmpty(xlsFile.Path);
        end
        % Create tests
        function testAbsoluteCreate(self, sensitivityLabelName)
            self.addTeardown(@delete, self.mNewFilePath);

            self.assumeEqual(exist(self.mNewFilePath, 'file'), 0);

            xlsFile = XLSFile();
            self.verifyFalse(xlsFile.IsOpen);
            self.verifyEqual(exist(self.mNewFilePath, 'file'), 0);

            if ~isempty(sensitivityLabelName)
                xlsFile.open(self.mNewFilePath, true, sensitivityLabelName);
            else
                xlsFile.open(self.mNewFilePath);
            end
            self.verifyTrue(xlsFile.IsOpen);
            self.verifyEqual(xlsFile.Path, self.mNewFilePath);
            self.verifyEqual(exist(self.mNewFilePath, 'file'), 2);

            xlsFile.close();
            self.verifyFalse(xlsFile.IsOpen);
            self.verifyEmpty(xlsFile.Path);
        end
        function testRelativeCreate(self, sensitivityLabelName)
            self.addTeardown(@delete, self.mNewFilePath);

            oldPwd = pwd;
            self.addTeardown(@cd, oldPwd);
            cd(fileparts(mfilename('fullpath')));

            self.assumeEqual(exist(self.mNewFileName, 'file'), 0);

            xlsFile = XLSFile();
            self.verifyFalse(xlsFile.IsOpen);
            self.verifyEmpty(xlsFile.Path);
            self.verifyEqual(exist(self.mNewFileName, 'file'), 0);

            if ~isempty(sensitivityLabelName)
                xlsFile.open(self.mNewFileName, true, sensitivityLabelName);
            else
                xlsFile.open(self.mNewFileName);
            end
            self.verifyTrue(xlsFile.IsOpen);
            self.verifyEqual(xlsFile.Path, self.mNewFilePath);
            self.verifyEqual(exist(self.mNewFileName, 'file'), 2);

            xlsFile.close();
            self.verifyFalse(xlsFile.IsOpen);
            self.verifyEmpty(xlsFile.Path);
        end
        function testAbsoluteNoCreate(self)
            self.assumeEqual(exist(self.mNewFilePath, 'file'), 0);

            xlsFile = XLSFile();
            self.verifyFalse(xlsFile.IsOpen);
            self.verifyEmpty(xlsFile.Path);

            self.verifyError(@() xlsFile.open(self.mNewFilePath, false), 'XLSFile:FileDoesNotExist');
            self.verifyFalse(xlsFile.IsOpen);
            self.verifyEmpty(xlsFile.Path);
            self.verifyEqual(exist(self.mNewFilePath, 'file'), 0);
        end
        function testRelativeNoCreate(self)
            oldPwd = pwd;
            self.addTeardown(@cd, oldPwd);
            cd(fileparts(mfilename('fullpath')));

            self.assumeEqual(exist(self.mNewFileName, 'file'), 0);

            xlsFile = XLSFile();
            self.verifyFalse(xlsFile.IsOpen);
            self.verifyEmpty(xlsFile.Path);

            self.verifyError(@() xlsFile.open(self.mNewFileName, false), 'XLSFile:FileDoesNotExist');
            self.verifyFalse(xlsFile.IsOpen);
            self.verifyEmpty(xlsFile.Path);
            self.verifyEqual(exist(self.mNewFileName, 'file'), 0);
        end
        % Save tests
        function testAbsoluteSaveAs(self)
            self.addTeardown(@delete, self.mNewFilePath);

            self.assumeEqual(exist(self.mDataFilePath, 'file'), 2);
            xlsFile = XLSFile(self.mDataFilePath);
            self.fatalAssertTrue(xlsFile.IsOpen);

            xlsFile.save(self.mNewFilePath);
            self.verifyEqual(exist(self.mNewFilePath, 'file'), 2);
        end
        function testRelativeSaveAs(self)
            self.addTeardown(@delete, self.mNewFilePath);

            oldPwd = pwd;
            self.addTeardown(@cd, oldPwd);
            cd(fileparts(mfilename('fullpath')));

            self.assumeEqual(exist(self.mDataFilePath, 'file'), 2);
            xlsFile = XLSFile(self.mDataFilePath);
            self.fatalAssertTrue(xlsFile.IsOpen);

            xlsFile.save(self.mNewFileName);
            self.verifyEqual(exist(self.mNewFileName, 'file'), 2);
        end
        function testAbsoluteSaveSameName(self)
            self.assumeEqual(exist(self.mDataFilePath, 'file'), 2);
            xlsFile = XLSFile(self.mDataFilePath);
            self.fatalAssertTrue(xlsFile.IsOpen);

            xlsFile.save(self.mDataFilePath);
            self.verifyEqual(exist(self.mDataFilePath, 'file'), 2);
        end
        function testRelativeSaveSameName(self)
            oldPwd = pwd;
            self.addTeardown(@cd, oldPwd);
            cd(fileparts(mfilename('fullpath')));

            self.assumeEqual(exist(self.mDataFilePath, 'file'), 2);
            xlsFile = XLSFile(self.mDataFilePath);
            self.fatalAssertTrue(xlsFile.IsOpen);

            xlsFile.save(self.mDataFileName);
            self.verifyEqual(exist(self.mDataFileName, 'file'), 2);
        end
        function testAbsoluteSaveExists(self)
            self.addTeardown(@delete, self.mNewFilePath);
            copyfile(self.mDataFilePath, self.mNewFilePath);

            self.assumeEqual(exist(self.mDataFilePath, 'file'), 2);
            self.assumeEqual(exist(self.mNewFilePath, 'file'), 2);
            xlsFile = XLSFile(self.mDataFilePath);
            self.fatalAssertTrue(xlsFile.IsOpen);

            self.verifyError(@() xlsFile.save(self.mNewFilePath), 'XLSFile:FileExists');
        end
        function testRelativeSaveExists(self)
            self.addTeardown(@delete, self.mNewFilePath);
            copyfile(self.mDataFilePath, self.mNewFilePath);

            oldPwd = pwd;
            self.addTeardown(@cd, oldPwd);
            cd(fileparts(mfilename('fullpath')));

            self.assumeEqual(exist(self.mDataFilePath, 'file'), 2);
            self.assumeEqual(exist(self.mNewFilePath, 'file'), 2);
            xlsFile = XLSFile(self.mDataFilePath);
            self.fatalAssertTrue(xlsFile.IsOpen);

            self.verifyError(@() xlsFile.save(self.mNewFileName), 'XLSFile:FileExists');
        end
        % Active sheet tests
        function testActiveSheet(self)
            self.assumeEqual(exist(self.mDataFilePath, 'file'), 2);
            xlsFile = XLSFile(self.mDataFilePath);
            self.fatalAssertTrue(xlsFile.IsOpen);

            self.verifyEqual(xlsFile.ActiveSheet, 'InitialSheet');
            xlsFile.ActiveSheet = 'OtherSheet';
            self.verifyEqual(xlsFile.ActiveSheet, 'OtherSheet');
        end
        function testActiveSheetNonExisting(self)
            self.assumeEqual(exist(self.mDataFilePath, 'file'), 2);
            xlsFile = XLSFile(self.mDataFilePath);
            self.verifyTrue(xlsFile.IsOpen);
            self.verifyEqual(xlsFile.ActiveSheet, 'InitialSheet');
            function testActiveSheetNonExistingPrivate()
                xlsFile.ActiveSheet = 'NonExistingSheet';
            end
            self.assertWarning(@testActiveSheetNonExistingPrivate, 'XLSFile:NoSuchName');
            self.verifyEqual(xlsFile.ActiveSheet, 'InitialSheet');
        end
        function testActiveSheetNotOpen(self)
            xlsFile = XLSFile();
            self.fatalAssertFalse(xlsFile.IsOpen);

            self.verifyEqual(xlsFile.ActiveSheet, '');
        end
        % Sheets test
        function testSheets(self)
            self.assumeEqual(exist(self.mDataFilePath, 'file'), 2);
            xlsFile = XLSFile(self.mDataFilePath);
            self.fatalAssertTrue(xlsFile.IsOpen);

            self.verifyEqual(xlsFile.Sheets, {'InitialSheet', 'OtherSheet'});
        end
        function testSheetsNotOpen(self)
            xlsFile = XLSFile();
            self.fatalAssertFalse(xlsFile.IsOpen);

            self.verifyTrue(iscell(xlsFile.Sheets));
            self.verifyEmpty(xlsFile.Sheets);
        end
        % New/delete sheet test
        function testRemoveAppendSheet(self)
            self.assumeEqual(exist(self.mDataFilePath, 'file'), 2);
            xlsFile = XLSFile(self.mDataFilePath);
            self.fatalAssertTrue(xlsFile.IsOpen);
            self.fatalAssertEqual(xlsFile.Sheets, {'InitialSheet', 'OtherSheet'});

            self.verifyTrue(xlsFile.addSheet('NewSheet'));
            self.verifyEqual(xlsFile.Sheets, {'InitialSheet', 'OtherSheet', 'NewSheet'});

            self.verifyTrue(xlsFile.removeSheet('NewSheet'));
            self.verifyEqual(xlsFile.Sheets, {'InitialSheet', 'OtherSheet'});
        end
        function testRemoveAddSheet(self, addTestData)
            self.assumeEqual(exist(self.mDataFilePath, 'file'), 2);
            xlsFile = XLSFile(self.mDataFilePath);
            self.fatalAssertTrue(xlsFile.IsOpen);
            self.fatalAssertEqual(xlsFile.Sheets, {'InitialSheet', 'OtherSheet'});

            self.verifyTrue(xlsFile.addSheet(addTestData.name, addTestData.place));
            self.verifyEqual(xlsFile.Sheets, addTestData.sheets);

            self.verifyTrue(xlsFile.removeSheet('NewSheet'));
            self.verifyEqual(xlsFile.Sheets, {'InitialSheet', 'OtherSheet'});
        end
        function testRemoveSheetNonExisting(self)
            self.assumeEqual(exist(self.mDataFilePath, 'file'), 2);
            xlsFile = XLSFile(self.mDataFilePath);
            self.fatalAssertTrue(xlsFile.IsOpen);
            self.fatalAssertEqual(xlsFile.Sheets, {'InitialSheet', 'OtherSheet'});

            self.verifyWarning(@() self.verifyFalse(xlsFile.removeSheet('NonExistingSheet')), 'XLSFile:NoSuchName');
            self.verifyEqual(xlsFile.Sheets, {'InitialSheet', 'OtherSheet'});
        end
        function testRemoveAppendSheetNotOpne(self)
            xlsFile = XLSFile();
            self.fatalAssertFalse(xlsFile.IsOpen);

            self.verifyFalse(xlsFile.addSheet('NewSheet'));
            self.verifyFalse(xlsFile.removeSheet('NewSheet'));
        end
        % Get data
        function testGetCell(self, cellRefActiveData)
            self.assumeEqual(exist(self.mDataFilePath, 'file'), 2);
            xlsFile = XLSFile(self.mDataFilePath);
            self.fatalAssertTrue(xlsFile.IsOpen);
            self.fatalAssertEqual(xlsFile.ActiveSheet, 'InitialSheet');
            self.fatalAssertEqual(xlsFile.Sheets, {'InitialSheet', 'OtherSheet'});

            self.verifyEqual(xlsFile(cellRefActiveData.row, cellRefActiveData.col), cellRefActiveData.data);
        end
        function testGetMatrix(self, matrixRefActiveData)
            self.assumeEqual(exist(self.mDataFilePath, 'file'), 2);
            xlsFile = XLSFile(self.mDataFilePath);
            self.fatalAssertTrue(xlsFile.IsOpen);
            self.fatalAssertEqual(xlsFile.ActiveSheet, 'InitialSheet');
            self.fatalAssertEqual(xlsFile.Sheets, {'InitialSheet', 'OtherSheet'});

            data = xlsFile{matrixRefActiveData.row, matrixRefActiveData.col};
            self.verifyEqual(data, matrixRefActiveData.data);
        end
        function testOtherGetCell(self, cellRefOtherData)
            self.assumeEqual(exist(self.mDataFilePath, 'file'), 2);
            xlsFile = XLSFile(self.mDataFilePath);
            self.fatalAssertTrue(xlsFile.IsOpen);
            self.fatalAssertEqual(xlsFile.Sheets, {'InitialSheet', 'OtherSheet'});

            self.verifyEqual(xlsFile.OtherSheet(cellRefOtherData.row, cellRefOtherData.col), cellRefOtherData.data);
        end
        function testOtherGetMatrix(self, matrixRefOtherData)
            self.assumeEqual(exist(self.mDataFilePath, 'file'), 2);
            xlsFile = XLSFile(self.mDataFilePath);
            self.fatalAssertTrue(xlsFile.IsOpen);
            self.fatalAssertEqual(xlsFile.Sheets, {'InitialSheet', 'OtherSheet'});

            data = xlsFile.OtherSheet{matrixRefOtherData.row, matrixRefOtherData.col};
            self.verifyEqual(data, matrixRefOtherData.data);
        end
        function testNonExistingGetCell(self)
            self.assumeEqual(exist(self.mDataFilePath, 'file'), 2);
            xlsFile = XLSFile(self.mDataFilePath);
            self.fatalAssertTrue(xlsFile.IsOpen);
            self.fatalAssertEqual(xlsFile.Sheets, {'InitialSheet', 'OtherSheet'});

            self.verifyError(@() xlsFile.NonExistingSheet(1, 1), 'XLSFile:NoSuchName');
        end
        function testNonExistingGetMatrix(self)
            self.assumeEqual(exist(self.mDataFilePath, 'file'), 2);
            xlsFile = XLSFile(self.mDataFilePath);
            self.fatalAssertTrue(xlsFile.IsOpen);
            self.fatalAssertEqual(xlsFile.Sheets, {'InitialSheet', 'OtherSheet'});

            self.verifyError(@() xlsFile.NonExistingSheet{1, 1}, 'XLSFile:NoSuchName');
        end
        function testNotOpenGetCell(self)
            xlsFile = XLSFile();
            self.fatalAssertFalse(xlsFile.IsOpen);
            self.fatalAssertEmpty(xlsFile.Sheets);

            self.verifyError(@() xlsFile(1, 1), 'XLSFile:NoWorkbook');
        end
        function testNotOpenGetMatrix(self)
            xlsFile = XLSFile();
            self.fatalAssertFalse(xlsFile.IsOpen);
            self.fatalAssertEmpty(xlsFile.Sheets);

            self.verifyError(@() xlsFile{1, 1}, 'XLSFile:NoWorkbook');
        end
        function testOtherNotOpenGetCell(self)
            xlsFile = XLSFile();
            self.fatalAssertFalse(xlsFile.IsOpen);
            self.fatalAssertEmpty(xlsFile.Sheets);

            self.verifyError(@() xlsFile.OtherSheet(1, 1), 'XLSFile:NoWorkbook');
        end
        function testOtherNotOpenGetMatrix(self)
            xlsFile = XLSFile();
            self.fatalAssertFalse(xlsFile.IsOpen);
            self.fatalAssertEmpty(xlsFile.Sheets);

            self.verifyError(@() xlsFile.OtherSheet{1, 1}, 'XLSFile:NoWorkbook');
        end
        % Set data
        function testSetCell(self, cellSetActiveData)
            self.addTeardown(@delete, self.mNewFilePath);
            copyfile(self.mDataFilePath, self.mNewFilePath);

            self.assumeEqual(exist(self.mNewFilePath, 'file'), 2);
            xlsFile = XLSFile(self.mNewFilePath);
            self.fatalAssertTrue(xlsFile.IsOpen);
            self.fatalAssertEqual(xlsFile.ActiveSheet, 'InitialSheet');
            self.fatalAssertEqual(xlsFile.Sheets, {'InitialSheet', 'OtherSheet'});

            data = xlsFile(cellSetActiveData.row, cellSetActiveData.col);
            self.assertEqual(data, cellSetActiveData.oldData);

            xlsFile(cellSetActiveData.row, cellSetActiveData.col) = cellSetActiveData.newData;
            data = xlsFile(cellSetActiveData.row, cellSetActiveData.col);
            self.verifyEqual(data, cellSetActiveData.newData);

            xlsFile.close();
            xlsFile.open(self.mNewFilePath);

            data = xlsFile(cellSetActiveData.row, cellSetActiveData.col);
            self.verifyEqual(data, cellSetActiveData.newData);
        end
        function testSetMatrix(self, matrixSetActiveData)
            self.addTeardown(@delete, self.mNewFilePath);
            copyfile(self.mDataFilePath, self.mNewFilePath);

            self.assumeEqual(exist(self.mNewFilePath, 'file'), 2);
            xlsFile = XLSFile(self.mNewFilePath);
            self.fatalAssertTrue(xlsFile.IsOpen);
            self.fatalAssertEqual(xlsFile.ActiveSheet, 'InitialSheet');
            self.fatalAssertEqual(xlsFile.Sheets, {'InitialSheet', 'OtherSheet'});

            data = xlsFile(matrixSetActiveData.row, matrixSetActiveData.col);
            self.assertEqual(data, matrixSetActiveData.oldData);

            xlsFile{matrixSetActiveData.row, matrixSetActiveData.col} = matrixSetActiveData.newData;
            data = xlsFile(matrixSetActiveData.row, matrixSetActiveData.col);
            self.verifyEqual(data, matrixSetActiveData.newData);

            xlsFile.close();
            xlsFile.open(self.mNewFilePath);

            data = xlsFile(matrixSetActiveData.row, matrixSetActiveData.col);
            self.verifyEqual(data, matrixSetActiveData.newData);
        end
        function testOtherSetCell(self, cellSetOtherData)
            self.addTeardown(@delete, self.mNewFilePath);
            copyfile(self.mDataFilePath, self.mNewFilePath);

            self.assumeEqual(exist(self.mNewFilePath, 'file'), 2);
            xlsFile = XLSFile(self.mNewFilePath);
            self.fatalAssertTrue(xlsFile.IsOpen);
            self.fatalAssertEqual(xlsFile.ActiveSheet, 'InitialSheet');
            self.fatalAssertEqual(xlsFile.Sheets, {'InitialSheet', 'OtherSheet'});

            data = xlsFile.OtherSheet(cellSetOtherData.row, cellSetOtherData.col);
            self.assertEqual(data, cellSetOtherData.oldData);

            xlsFile.OtherSheet(cellSetOtherData.row, cellSetOtherData.col) = cellSetOtherData.newData;
            data = xlsFile.OtherSheet(cellSetOtherData.row, cellSetOtherData.col);
            self.verifyEqual(data, cellSetOtherData.newData);

            xlsFile.save();
            xlsFile.close(false);
            xlsFile.open(self.mNewFilePath);

            data = xlsFile.OtherSheet(cellSetOtherData.row, cellSetOtherData.col);
            self.verifyEqual(data, cellSetOtherData.newData);
        end
        function testOtherSetMatrix(self, matrixSetOtherData)
            self.addTeardown(@delete, self.mNewFilePath);
            copyfile(self.mDataFilePath, self.mNewFilePath);

            self.assumeEqual(exist(self.mNewFilePath, 'file'), 2);
            xlsFile = XLSFile(self.mNewFilePath);
            self.fatalAssertTrue(xlsFile.IsOpen);
            self.fatalAssertEqual(xlsFile.ActiveSheet, 'InitialSheet');
            self.fatalAssertEqual(xlsFile.Sheets, {'InitialSheet', 'OtherSheet'});

            data = xlsFile.OtherSheet(matrixSetOtherData.row, matrixSetOtherData.col);
            self.assertEqual(data, matrixSetOtherData.oldData);

            xlsFile.OtherSheet{matrixSetOtherData.row, matrixSetOtherData.col} = matrixSetOtherData.newData;
            data = xlsFile.OtherSheet(matrixSetOtherData.row, matrixSetOtherData.col);
            self.verifyEqual(data, matrixSetOtherData.newData);

            xlsFile.save();
            xlsFile.close(false);
            xlsFile.open(self.mNewFilePath);

            data = xlsFile.OtherSheet(matrixSetOtherData.row, matrixSetOtherData.col);
            self.verifyEqual(data, matrixSetOtherData.newData);
        end
        function testNonExistingSetCell(self)
            self.assumeEqual(exist(self.mDataFilePath, 'file'), 2);
            xlsFile = XLSFile(self.mDataFilePath);
            self.fatalAssertTrue(xlsFile.IsOpen);
            self.fatalAssertEqual(xlsFile.Sheets, {'InitialSheet', 'OtherSheet'});

            function testNonExistingSetCellPrivate()
                xlsFile.NonExistingSheet(1, 1) = {1};
            end

            self.verifyError(@testNonExistingSetCellPrivate, 'XLSFile:NoSuchName');
        end
        function testNonExistingSetMatrix(self)
            self.assumeEqual(exist(self.mDataFilePath, 'file'), 2);
            xlsFile = XLSFile(self.mDataFilePath);
            self.fatalAssertTrue(xlsFile.IsOpen);
            self.fatalAssertEqual(xlsFile.Sheets, {'InitialSheet', 'OtherSheet'});

            function testNonExistingSetMatrixPrivate()
                xlsFile.NonExistingSheet{1, 1} = 1;
            end

            self.verifyError(@testNonExistingSetMatrixPrivate, 'XLSFile:NoSuchName');
        end
        function testNotOpenSetCell(self)
            xlsFile = XLSFile();
            self.fatalAssertFalse(xlsFile.IsOpen);
            self.fatalAssertEmpty(xlsFile.Sheets);

            function testNotOpenSetCellPrivate()
                xlsFile(1, 1) = {1};
            end

            self.verifyError(@testNotOpenSetCellPrivate, 'XLSFile:NoWorkbook');
        end
        function testNotOpenSetMatrix(self)
            xlsFile = XLSFile();
            self.fatalAssertFalse(xlsFile.IsOpen);
            self.fatalAssertEmpty(xlsFile.Sheets);

            function testNotOpenSetMatrixPrivate()
                xlsFile{1, 1} = 1;
            end

            self.verifyError(@testNotOpenSetMatrixPrivate, 'XLSFile:NoWorkbook');
        end
        function testOtherNotOpenSetCell(self)
            xlsFile = XLSFile();
            self.fatalAssertFalse(xlsFile.IsOpen);
            self.fatalAssertEmpty(xlsFile.Sheets);

            function testOtherNotOpenSetCellPrivate()
                xlsFile.OtherSheet(1, 1) = {1};
            end

            self.verifyError(@testOtherNotOpenSetCellPrivate, 'XLSFile:NoWorkbook');
        end
        function testOtherNotOpenSetMatrix(self)
            xlsFile = XLSFile();
            self.fatalAssertFalse(xlsFile.IsOpen);
            self.fatalAssertEmpty(xlsFile.Sheets);

            function testOtherNotOpenSetMatrixPrivate()
                xlsFile.OtherSheet{1, 1} = 1;
            end

            self.verifyError(@testOtherNotOpenSetMatrixPrivate, 'XLSFile:NoWorkbook');
        end
    end

    methods(TestMethodTeardown)
        function checkExcel(self)
            t = 10;
            excelTasks = true;
            while (t ~= 0)
                excelTasks = taskList(false, 'excel.exe');
                if ~isempty(self.mExcelTasks)
                    excelTasks(arrayfun(@(task) any(self.mExcelTasks.PID == task.PID), excelTasks)) = [];
                end
                if isempty(excelTasks)
                    break;
                end
                pause(1);
                t = t - 1;
            end
            self.verifyEmpty(excelTasks);
        end
    end

    methods(TestClassTeardown)
        function teardownPath(self)
            rmpath(self.mBasePath);
            rehash;
        end
    end
end

